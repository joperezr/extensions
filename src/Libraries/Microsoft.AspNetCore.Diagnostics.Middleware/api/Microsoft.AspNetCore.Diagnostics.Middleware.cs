//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.AspNetCore.Builder
{
    public static partial class RequestLatencyTelemetryApplicationBuilderExtensions
    {
        public static IApplicationBuilder UseRequestCheckpoint(this IApplicationBuilder builder) { throw null; }

        public static IApplicationBuilder UseRequestLatencyTelemetry(this IApplicationBuilder builder) { throw null; }
    }
}

namespace Microsoft.AspNetCore.Diagnostics.Latency
{
    public static partial class RequestCheckpointConstants
    {
        public const string ElapsedResponseProcessed = "eltrspproc";
        public const string ElapsedTillEntryMiddleware = "eltenm";
        public const string ElapsedTillFinished = "eltltf";
        public const string ElapsedTillHeaders = "elthdr";
        public const string ElapsedTillPipelineExitMiddleware = "eltexm";
    }

    public partial class RequestLatencyTelemetryOptions
    {
        public System.TimeSpan LatencyDataExportTimeout { get { throw null; } set { } }
    }
}

namespace Microsoft.AspNetCore.Diagnostics.Logging
{
    public static partial class HttpLoggingTagNames
    {
        public const string Duration = "Duration";
        public const string Host = "server.address";
        public const string Method = "Method";
        public const string Path = "Path";
        public const string RequestBody = "RequestBody";
        public const string RequestHeaderPrefix = "http.request.header.";
        public const string ResponseBody = "ResponseBody";
        public const string ResponseHeaderPrefix = "http.response.header.";
        public const string StatusCode = "StatusCode";
        public static System.Collections.Generic.IReadOnlyList<string> DimensionNames { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0013", UrlFormat = "https://aka.ms/dotnet-extensions-warnings/{0}")]
    public partial interface IHttpLogEnricher
    {
        void Enrich(Extensions.Diagnostics.Enrichment.IEnrichmentTagCollector collector, Http.HttpContext httpContext);
    }

    public enum IncomingPathLoggingMode
    {
        Formatted = 0,
        Structured = 1
    }

    [System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0013", UrlFormat = "https://aka.ms/dotnet-extensions-warnings/{0}")]
    public partial class LoggingRedactionOptions
    {
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ISet<string> ExcludePathStartsWith { get { throw null; } set { } }

        public bool IncludeUnmatchedRoutes { get { throw null; } set { } }

        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Extensions.Compliance.Classification.DataClassification> RequestHeadersDataClasses { get { throw null; } set { } }

        public IncomingPathLoggingMode RequestPathLoggingMode { get { throw null; } set { } }

        public Extensions.Http.Diagnostics.HttpRouteParameterRedactionMode RequestPathParameterRedactionMode { get { throw null; } set { } }

        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Extensions.Compliance.Classification.DataClassification> ResponseHeadersDataClasses { get { throw null; } set { } }

        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Extensions.Compliance.Classification.DataClassification> RouteParameterDataClasses { get { throw null; } set { } }
    }

    public partial class RequestHeadersLogEnricherOptions
    {
        [System.ComponentModel.DataAnnotations.Required]
        [System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0003", UrlFormat = "https://aka.ms/dotnet-extensions-warnings/{0}")]
        public System.Collections.Generic.IDictionary<string, Extensions.Compliance.Classification.DataClassification> HeadersDataClasses { get { throw null; } set { } }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0013", UrlFormat = "https://aka.ms/dotnet-extensions-warnings/{0}")]
    public static partial class HttpLoggingServiceCollectionExtensions
    {
        public static IServiceCollection AddHttpLogEnricher<T>(this IServiceCollection services)
            where T : class, AspNetCore.Diagnostics.Logging.IHttpLogEnricher { throw null; }

        public static IServiceCollection AddHttpLoggingRedaction(this IServiceCollection services, Configuration.IConfigurationSection section) { throw null; }

        public static IServiceCollection AddHttpLoggingRedaction(this IServiceCollection services, System.Action<AspNetCore.Diagnostics.Logging.LoggingRedactionOptions>? configure = null) { throw null; }
    }

    public static partial class RequestHeadersEnricherServiceCollectionExtensions
    {
        public static IServiceCollection AddRequestHeadersLogEnricher(this IServiceCollection services, System.Action<AspNetCore.Diagnostics.Logging.RequestHeadersLogEnricherOptions> configure) { throw null; }

        public static IServiceCollection AddRequestHeadersLogEnricher(this IServiceCollection services) { throw null; }
    }

    public static partial class RequestLatencyTelemetryServiceCollectionExtensions
    {
        public static IServiceCollection AddRequestCheckpoint(this IServiceCollection services) { throw null; }

        public static IServiceCollection AddRequestLatencyTelemetry(this IServiceCollection services, Configuration.IConfigurationSection section) { throw null; }

        public static IServiceCollection AddRequestLatencyTelemetry(this IServiceCollection services, System.Action<AspNetCore.Diagnostics.Latency.RequestLatencyTelemetryOptions> configure) { throw null; }

        public static IServiceCollection AddRequestLatencyTelemetry(this IServiceCollection services) { throw null; }
    }
}