//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.AI.Evaluation.Reporting.Storage
{
    public static partial class AzureStorageReportingConfiguration
    {
        public static ReportingConfiguration Create(global::Azure.Storage.Files.DataLake.DataLakeDirectoryClient client, System.Collections.Generic.IEnumerable<IEvaluator> evaluators, ChatConfiguration? chatConfiguration = null, bool enableResponseCaching = true, System.TimeSpan? timeToLiveForCacheEntries = null, System.Collections.Generic.IEnumerable<string>? cachingKeys = null, string executionName = "Default", System.Func<EvaluationMetric, EvaluationMetricInterpretation?>? evaluationMetricInterpreter = null, System.Collections.Generic.IEnumerable<string>? tags = null) { throw null; }
    }

    public sealed partial class AzureStorageResponseCacheProvider : IEvaluationResponseCacheProvider
    {
        public AzureStorageResponseCacheProvider(global::Azure.Storage.Files.DataLake.DataLakeDirectoryClient client, System.TimeSpan? timeToLiveForCacheEntries = null) { }

        public System.Threading.Tasks.ValueTask DeleteExpiredCacheEntriesAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.ValueTask<Caching.Distributed.IDistributedCache> GetCacheAsync(string scenarioName, string iterationName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.ValueTask ResetAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class AzureStorageResultStore : IEvaluationResultStore
    {
        public AzureStorageResultStore(global::Azure.Storage.Files.DataLake.DataLakeDirectoryClient client) { }

        public System.Threading.Tasks.ValueTask DeleteResultsAsync(string? executionName = null, string? scenarioName = null, string? iterationName = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<string> GetIterationNamesAsync(string executionName, string scenarioName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<string> GetLatestExecutionNamesAsync(int? count = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<string> GetScenarioNamesAsync(string executionName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<ScenarioRunResult> ReadResultsAsync(string? executionName = null, string? scenarioName = null, string? iterationName = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.ValueTask WriteResultsAsync(System.Collections.Generic.IEnumerable<ScenarioRunResult> results, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }
}