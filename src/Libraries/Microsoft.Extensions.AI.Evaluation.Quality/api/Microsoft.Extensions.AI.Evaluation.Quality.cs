//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.AI.Evaluation.Quality
{
    public sealed partial class CoherenceEvaluator : IEvaluator
    {
        public static string CoherenceMetricName { get { throw null; } }

        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class CompletenessEvaluator : IEvaluator
    {
        public static string CompletenessMetricName { get { throw null; } }

        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class CompletenessEvaluatorContext : EvaluationContext
    {
        public CompletenessEvaluatorContext(string groundTruth) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public string GroundTruth { get { throw null; } }

        public static string GroundTruthContextName { get { throw null; } }
    }

    public sealed partial class EquivalenceEvaluator : IEvaluator
    {
        public static string EquivalenceMetricName { get { throw null; } }

        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class EquivalenceEvaluatorContext : EvaluationContext
    {
        public EquivalenceEvaluatorContext(string groundTruth) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public string GroundTruth { get { throw null; } }

        public static string GroundTruthContextName { get { throw null; } }
    }

    public sealed partial class FluencyEvaluator : IEvaluator
    {
        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string FluencyMetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class GroundednessEvaluator : IEvaluator
    {
        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string GroundednessMetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class GroundednessEvaluatorContext : EvaluationContext
    {
        public GroundednessEvaluatorContext(string groundingContext) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public string GroundingContext { get { throw null; } }

        public static string GroundingContextName { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("AIEVAL001")]
    public sealed partial class IntentResolutionEvaluator : IEvaluator
    {
        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string IntentResolutionMetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("AIEVAL001")]
    public sealed partial class IntentResolutionEvaluatorContext : EvaluationContext
    {
        public IntentResolutionEvaluatorContext(params AITool[] toolDefinitions) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public IntentResolutionEvaluatorContext(System.Collections.Generic.IEnumerable<AITool> toolDefinitions) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public System.Collections.Generic.IReadOnlyList<AITool> ToolDefinitions { get { throw null; } }

        public static string ToolDefinitionsContextName { get { throw null; } }
    }

    public sealed partial class RelevanceEvaluator : IEvaluator
    {
        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string RelevanceMetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("AIEVAL001")]
    public sealed partial class RelevanceTruthAndCompletenessEvaluator : IEvaluator
    {
        public static string CompletenessMetricName { get { throw null; } }

        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string RelevanceMetricName { get { throw null; } }

        public static string TruthMetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class RetrievalEvaluator : IEvaluator
    {
        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string RetrievalMetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class RetrievalEvaluatorContext : EvaluationContext
    {
        public RetrievalEvaluatorContext(System.Collections.Generic.IEnumerable<string> retrievedContextChunks) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public RetrievalEvaluatorContext(params string[] retrievedContextChunks) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public System.Collections.Generic.IReadOnlyList<string> RetrievedContextChunks { get { throw null; } }

        public static string RetrievedContextChunksContextName { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("AIEVAL001")]
    public sealed partial class TaskAdherenceEvaluator : IEvaluator
    {
        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string TaskAdherenceMetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("AIEVAL001")]
    public sealed partial class TaskAdherenceEvaluatorContext : EvaluationContext
    {
        public TaskAdherenceEvaluatorContext(params AITool[] toolDefinitions) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public TaskAdherenceEvaluatorContext(System.Collections.Generic.IEnumerable<AITool> toolDefinitions) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public System.Collections.Generic.IReadOnlyList<AITool> ToolDefinitions { get { throw null; } }

        public static string ToolDefinitionsContextName { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("AIEVAL001")]
    public sealed partial class ToolCallAccuracyEvaluator : IEvaluator
    {
        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string ToolCallAccuracyMetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("AIEVAL001")]
    public sealed partial class ToolCallAccuracyEvaluatorContext : EvaluationContext
    {
        public ToolCallAccuracyEvaluatorContext(params AITool[] toolDefinitions) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public ToolCallAccuracyEvaluatorContext(System.Collections.Generic.IEnumerable<AITool> toolDefinitions) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public System.Collections.Generic.IReadOnlyList<AITool> ToolDefinitions { get { throw null; } }

        public static string ToolDefinitionsContextName { get { throw null; } }
    }
}