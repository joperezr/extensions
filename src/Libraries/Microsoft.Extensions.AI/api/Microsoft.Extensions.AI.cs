//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.AI
{
    public abstract partial class CachingChatClient : DelegatingChatClient
    {
        protected CachingChatClient(IChatClient innerClient) : base(default!) { }

        public bool CoalesceStreamingUpdates { get { throw null; } set { } }

        protected virtual bool EnableCaching(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options) { throw null; }

        protected abstract string GetCacheKey(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options, params scoped System.ReadOnlySpan<object?> additionalValues);
        public override System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public override System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected abstract System.Threading.Tasks.Task<ChatResponse?> ReadCacheAsync(string key, System.Threading.CancellationToken cancellationToken);
        protected abstract System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<ChatResponseUpdate>?> ReadCacheStreamingAsync(string key, System.Threading.CancellationToken cancellationToken);
        protected abstract System.Threading.Tasks.Task WriteCacheAsync(string key, ChatResponse value, System.Threading.CancellationToken cancellationToken);
        protected abstract System.Threading.Tasks.Task WriteCacheStreamingAsync(string key, System.Collections.Generic.IReadOnlyList<ChatResponseUpdate> value, System.Threading.CancellationToken cancellationToken);
    }

    public abstract partial class CachingEmbeddingGenerator<TInput, TEmbedding> : DelegatingEmbeddingGenerator<TInput, TEmbedding> where TEmbedding : Embedding
    {
        protected CachingEmbeddingGenerator(IEmbeddingGenerator<TInput, TEmbedding> innerGenerator) : base(default!) { }

        public override System.Threading.Tasks.Task<GeneratedEmbeddings<TEmbedding>> GenerateAsync(System.Collections.Generic.IEnumerable<TInput> values, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected abstract string GetCacheKey(params scoped System.ReadOnlySpan<object?> values);
        protected abstract System.Threading.Tasks.Task<TEmbedding?> ReadCacheAsync(string key, System.Threading.CancellationToken cancellationToken);
        protected abstract System.Threading.Tasks.Task WriteCacheAsync(string key, TEmbedding value, System.Threading.CancellationToken cancellationToken);
    }

    public sealed partial class ChatClientBuilder
    {
        public ChatClientBuilder(IChatClient innerClient) { }

        public ChatClientBuilder(System.Func<System.IServiceProvider, IChatClient> innerClientFactory) { }

        public IChatClient Build(System.IServiceProvider? services = null) { throw null; }

        public ChatClientBuilder Use(System.Func<IChatClient, IChatClient> clientFactory) { throw null; }

        public ChatClientBuilder Use(System.Func<IChatClient, System.IServiceProvider, IChatClient> clientFactory) { throw null; }

        public ChatClientBuilder Use(System.Func<System.Collections.Generic.IEnumerable<ChatMessage>, ChatOptions?, IChatClient, System.Threading.CancellationToken, System.Threading.Tasks.Task<ChatResponse>>? getResponseFunc, System.Func<System.Collections.Generic.IEnumerable<ChatMessage>, ChatOptions?, IChatClient, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate>>? getStreamingResponseFunc) { throw null; }

        public ChatClientBuilder Use(System.Func<System.Collections.Generic.IEnumerable<ChatMessage>, ChatOptions?, System.Func<System.Collections.Generic.IEnumerable<ChatMessage>, ChatOptions?, System.Threading.CancellationToken, System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.Task> sharedFunc) { throw null; }
    }

    public static partial class ChatClientBuilderChatClientExtensions
    {
        public static ChatClientBuilder AsBuilder(this IChatClient innerClient) { throw null; }
    }

    public static partial class ChatClientStructuredOutputExtensions
    {
        public static System.Threading.Tasks.Task<ChatResponse<T>> GetResponseAsync<T>(this IChatClient chatClient, ChatMessage chatMessage, ChatOptions? options = null, bool? useJsonSchemaResponseFormat = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<ChatResponse<T>> GetResponseAsync<T>(this IChatClient chatClient, ChatMessage chatMessage, System.Text.Json.JsonSerializerOptions serializerOptions, ChatOptions? options = null, bool? useJsonSchemaResponseFormat = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<ChatResponse<T>> GetResponseAsync<T>(this IChatClient chatClient, System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, bool? useJsonSchemaResponseFormat = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<ChatResponse<T>> GetResponseAsync<T>(this IChatClient chatClient, System.Collections.Generic.IEnumerable<ChatMessage> messages, System.Text.Json.JsonSerializerOptions serializerOptions, ChatOptions? options = null, bool? useJsonSchemaResponseFormat = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<ChatResponse<T>> GetResponseAsync<T>(this IChatClient chatClient, string chatMessage, ChatOptions? options = null, bool? useJsonSchemaResponseFormat = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<ChatResponse<T>> GetResponseAsync<T>(this IChatClient chatClient, string chatMessage, System.Text.Json.JsonSerializerOptions serializerOptions, ChatOptions? options = null, bool? useJsonSchemaResponseFormat = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public partial class ChatResponse<T> : ChatResponse
    {
        public ChatResponse(ChatResponse response, System.Text.Json.JsonSerializerOptions serializerOptions) { }

        public T Result { get { throw null; } }

        public bool TryGetResult(out T? result) { throw null; }
    }

    public sealed partial class ConfigureOptionsChatClient : DelegatingChatClient
    {
        public ConfigureOptionsChatClient(IChatClient innerClient, System.Action<ChatOptions> configure) : base(default!) { }

        public override System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public override System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public static partial class ConfigureOptionsChatClientBuilderExtensions
    {
        public static ChatClientBuilder ConfigureOptions(this ChatClientBuilder builder, System.Action<ChatOptions> configure) { throw null; }
    }

    public static partial class ConfigureOptionsEmbeddingGeneratorBuilderExtensions
    {
        public static EmbeddingGeneratorBuilder<TInput, TEmbedding> ConfigureOptions<TInput, TEmbedding>(this EmbeddingGeneratorBuilder<TInput, TEmbedding> builder, System.Action<EmbeddingGenerationOptions> configure)
            where TEmbedding : Embedding { throw null; }
    }

    public sealed partial class ConfigureOptionsEmbeddingGenerator<TInput, TEmbedding> : DelegatingEmbeddingGenerator<TInput, TEmbedding> where TEmbedding : Embedding
    {
        public ConfigureOptionsEmbeddingGenerator(IEmbeddingGenerator<TInput, TEmbedding> innerGenerator, System.Action<EmbeddingGenerationOptions> configure) : base(default!) { }

        public override System.Threading.Tasks.Task<GeneratedEmbeddings<TEmbedding>> GenerateAsync(System.Collections.Generic.IEnumerable<TInput> values, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public sealed partial class ConfigureOptionsSpeechToTextClient : DelegatingSpeechToTextClient
    {
        public ConfigureOptionsSpeechToTextClient(ISpeechToTextClient innerClient, System.Action<SpeechToTextOptions> configure) : base(default!) { }

        public override System.Collections.Generic.IAsyncEnumerable<SpeechToTextResponseUpdate> GetStreamingTextAsync(System.IO.Stream audioSpeechStream, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public override System.Threading.Tasks.Task<SpeechToTextResponse> GetTextAsync(System.IO.Stream audioSpeechStream, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public static partial class ConfigureOptionsSpeechToTextClientBuilderExtensions
    {
        public static SpeechToTextClientBuilder ConfigureOptions(this SpeechToTextClientBuilder builder, System.Action<SpeechToTextOptions> configure) { throw null; }
    }

    public partial class DistributedCachingChatClient : CachingChatClient
    {
        public DistributedCachingChatClient(IChatClient innerClient, Caching.Distributed.IDistributedCache storage) : base(default!) { }

        public System.Collections.Generic.IReadOnlyList<object>? CacheKeyAdditionalValues { get { throw null; } set { } }

        public System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get { throw null; } set { } }

        protected override string GetCacheKey(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options, params scoped System.ReadOnlySpan<object?> additionalValues) { throw null; }

        protected override System.Threading.Tasks.Task<ChatResponse?> ReadCacheAsync(string key, System.Threading.CancellationToken cancellationToken) { throw null; }

        protected override System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<ChatResponseUpdate>?> ReadCacheStreamingAsync(string key, System.Threading.CancellationToken cancellationToken) { throw null; }

        protected override System.Threading.Tasks.Task WriteCacheAsync(string key, ChatResponse value, System.Threading.CancellationToken cancellationToken) { throw null; }

        protected override System.Threading.Tasks.Task WriteCacheStreamingAsync(string key, System.Collections.Generic.IReadOnlyList<ChatResponseUpdate> value, System.Threading.CancellationToken cancellationToken) { throw null; }
    }

    public static partial class DistributedCachingChatClientBuilderExtensions
    {
        public static ChatClientBuilder UseDistributedCache(this ChatClientBuilder builder, Caching.Distributed.IDistributedCache? storage = null, System.Action<DistributedCachingChatClient>? configure = null) { throw null; }
    }

    public static partial class DistributedCachingEmbeddingGeneratorBuilderExtensions
    {
        public static EmbeddingGeneratorBuilder<TInput, TEmbedding> UseDistributedCache<TInput, TEmbedding>(this EmbeddingGeneratorBuilder<TInput, TEmbedding> builder, Caching.Distributed.IDistributedCache? storage = null, System.Action<DistributedCachingEmbeddingGenerator<TInput, TEmbedding>>? configure = null)
            where TEmbedding : Embedding { throw null; }
    }

    public partial class DistributedCachingEmbeddingGenerator<TInput, TEmbedding> : CachingEmbeddingGenerator<TInput, TEmbedding> where TEmbedding : Embedding
    {
        public DistributedCachingEmbeddingGenerator(IEmbeddingGenerator<TInput, TEmbedding> innerGenerator, Caching.Distributed.IDistributedCache storage) : base(default!) { }

        public System.Collections.Generic.IReadOnlyList<object>? CacheKeyAdditionalValues { get { throw null; } set { } }

        public System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get { throw null; } set { } }

        protected override string GetCacheKey(params scoped System.ReadOnlySpan<object?> values) { throw null; }

        protected override System.Threading.Tasks.Task<TEmbedding?> ReadCacheAsync(string key, System.Threading.CancellationToken cancellationToken) { throw null; }

        protected override System.Threading.Tasks.Task WriteCacheAsync(string key, TEmbedding value, System.Threading.CancellationToken cancellationToken) { throw null; }
    }

    public static partial class EmbeddingGeneratorBuilderEmbeddingGeneratorExtensions
    {
        public static EmbeddingGeneratorBuilder<TInput, TEmbedding> AsBuilder<TInput, TEmbedding>(this IEmbeddingGenerator<TInput, TEmbedding> innerGenerator)
            where TEmbedding : Embedding { throw null; }
    }

    public sealed partial class EmbeddingGeneratorBuilder<TInput, TEmbedding>
        where TEmbedding : Embedding
    {
        public EmbeddingGeneratorBuilder(IEmbeddingGenerator<TInput, TEmbedding> innerGenerator) { }

        public EmbeddingGeneratorBuilder(System.Func<System.IServiceProvider, IEmbeddingGenerator<TInput, TEmbedding>> innerGeneratorFactory) { }

        public IEmbeddingGenerator<TInput, TEmbedding> Build(System.IServiceProvider? services = null) { throw null; }

        public EmbeddingGeneratorBuilder<TInput, TEmbedding> Use(System.Func<IEmbeddingGenerator<TInput, TEmbedding>, IEmbeddingGenerator<TInput, TEmbedding>> generatorFactory) { throw null; }

        public EmbeddingGeneratorBuilder<TInput, TEmbedding> Use(System.Func<IEmbeddingGenerator<TInput, TEmbedding>, System.IServiceProvider, IEmbeddingGenerator<TInput, TEmbedding>> generatorFactory) { throw null; }

        public EmbeddingGeneratorBuilder<TInput, TEmbedding> Use(System.Func<System.Collections.Generic.IEnumerable<TInput>, EmbeddingGenerationOptions?, IEmbeddingGenerator<TInput, TEmbedding>, System.Threading.CancellationToken, System.Threading.Tasks.Task<GeneratedEmbeddings<TEmbedding>>>? generateFunc) { throw null; }
    }

    public partial class FunctionInvocationContext
    {
        public AIFunctionArguments Arguments { get { throw null; } set { } }

        public FunctionCallContent CallContent { get { throw null; } set { } }

        public AIFunction Function { get { throw null; } set { } }

        public int FunctionCallIndex { get { throw null; } set { } }

        public int FunctionCount { get { throw null; } set { } }

        public bool IsStreaming { get { throw null; } set { } }

        public int Iteration { get { throw null; } set { } }

        public System.Collections.Generic.IList<ChatMessage> Messages { get { throw null; } set { } }

        public ChatOptions? Options { get { throw null; } set { } }

        public bool Terminate { get { throw null; } set { } }
    }

    public partial class FunctionInvokingChatClient : DelegatingChatClient
    {
        public FunctionInvokingChatClient(IChatClient innerClient, Logging.ILoggerFactory? loggerFactory = null, System.IServiceProvider? functionInvocationServices = null) : base(default!) { }

        public bool AllowConcurrentInvocation { get { throw null; } set { } }

        public static FunctionInvocationContext? CurrentContext { get { throw null; } protected set { } }

        protected System.IServiceProvider? FunctionInvocationServices { get { throw null; } }

        public System.Func<FunctionInvocationContext, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<object?>>? FunctionInvoker { get { throw null; } set { } }

        public bool IncludeDetailedErrors { get { throw null; } set { } }

        public int MaximumConsecutiveErrorsPerRequest { get { throw null; } set { } }

        public int MaximumIterationsPerRequest { get { throw null; } set { } }

        protected virtual System.Collections.Generic.IList<ChatMessage> CreateResponseMessages(System.ReadOnlySpan<FunctionInvocationResult> results) { throw null; }

        public override System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public override System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected virtual System.Threading.Tasks.ValueTask<object?> InvokeFunctionAsync(FunctionInvocationContext context, System.Threading.CancellationToken cancellationToken) { throw null; }

        public sealed partial class FunctionInvocationResult
        {
            internal FunctionInvocationResult() { }

            public FunctionCallContent CallContent { get { throw null; } }

            public System.Exception? Exception { get { throw null; } }

            public object? Result { get { throw null; } }

            public FunctionInvocationStatus Status { get { throw null; } }

            public bool Terminate { get { throw null; } }
        }

        public enum FunctionInvocationStatus
        {
            RanToCompletion = 0,
            NotFound = 1,
            Exception = 2
        }
    }

    public static partial class FunctionInvokingChatClientBuilderExtensions
    {
        public static ChatClientBuilder UseFunctionInvocation(this ChatClientBuilder builder, Logging.ILoggerFactory? loggerFactory = null, System.Action<FunctionInvokingChatClient>? configure = null) { throw null; }
    }

    public partial class LoggingChatClient : DelegatingChatClient
    {
        public LoggingChatClient(IChatClient innerClient, Logging.ILogger logger) : base(default!) { }

        public System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get { throw null; } set { } }

        public override System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public override System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public static partial class LoggingChatClientBuilderExtensions
    {
        public static ChatClientBuilder UseLogging(this ChatClientBuilder builder, Logging.ILoggerFactory? loggerFactory = null, System.Action<LoggingChatClient>? configure = null) { throw null; }
    }

    public static partial class LoggingEmbeddingGeneratorBuilderExtensions
    {
        public static EmbeddingGeneratorBuilder<TInput, TEmbedding> UseLogging<TInput, TEmbedding>(this EmbeddingGeneratorBuilder<TInput, TEmbedding> builder, Logging.ILoggerFactory? loggerFactory = null, System.Action<LoggingEmbeddingGenerator<TInput, TEmbedding>>? configure = null)
            where TEmbedding : Embedding { throw null; }
    }

    public partial class LoggingEmbeddingGenerator<TInput, TEmbedding> : DelegatingEmbeddingGenerator<TInput, TEmbedding> where TEmbedding : Embedding
    {
        public LoggingEmbeddingGenerator(IEmbeddingGenerator<TInput, TEmbedding> innerGenerator, Logging.ILogger logger) : base(default!) { }

        public System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get { throw null; } set { } }

        public override System.Threading.Tasks.Task<GeneratedEmbeddings<TEmbedding>> GenerateAsync(System.Collections.Generic.IEnumerable<TInput> values, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public partial class LoggingSpeechToTextClient : DelegatingSpeechToTextClient
    {
        public LoggingSpeechToTextClient(ISpeechToTextClient innerClient, Logging.ILogger logger) : base(default!) { }

        public System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get { throw null; } set { } }

        public override System.Collections.Generic.IAsyncEnumerable<SpeechToTextResponseUpdate> GetStreamingTextAsync(System.IO.Stream audioSpeechStream, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public override System.Threading.Tasks.Task<SpeechToTextResponse> GetTextAsync(System.IO.Stream audioSpeechStream, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public static partial class LoggingSpeechToTextClientBuilderExtensions
    {
        public static SpeechToTextClientBuilder UseLogging(this SpeechToTextClientBuilder builder, Logging.ILoggerFactory? loggerFactory = null, System.Action<LoggingSpeechToTextClient>? configure = null) { throw null; }
    }

    public sealed partial class OpenTelemetryChatClient : DelegatingChatClient
    {
        public OpenTelemetryChatClient(IChatClient innerClient, Logging.ILogger? logger = null, string? sourceName = null) : base(default!) { }

        public bool EnableSensitiveData { get { throw null; } set { } }

        public System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get { throw null; } set { } }

        protected override void Dispose(bool disposing) { }

        public override System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public override object? GetService(System.Type serviceType, object? serviceKey = null) { throw null; }

        public override System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public static partial class OpenTelemetryChatClientBuilderExtensions
    {
        public static ChatClientBuilder UseOpenTelemetry(this ChatClientBuilder builder, Logging.ILoggerFactory? loggerFactory = null, string? sourceName = null, System.Action<OpenTelemetryChatClient>? configure = null) { throw null; }
    }

    public static partial class OpenTelemetryEmbeddingGeneratorBuilderExtensions
    {
        public static EmbeddingGeneratorBuilder<TInput, TEmbedding> UseOpenTelemetry<TInput, TEmbedding>(this EmbeddingGeneratorBuilder<TInput, TEmbedding> builder, Logging.ILoggerFactory? loggerFactory = null, string? sourceName = null, System.Action<OpenTelemetryEmbeddingGenerator<TInput, TEmbedding>>? configure = null)
            where TEmbedding : Embedding { throw null; }
    }

    public sealed partial class OpenTelemetryEmbeddingGenerator<TInput, TEmbedding> : DelegatingEmbeddingGenerator<TInput, TEmbedding> where TEmbedding : Embedding
    {
        public OpenTelemetryEmbeddingGenerator(IEmbeddingGenerator<TInput, TEmbedding> innerGenerator, Logging.ILogger? logger = null, string? sourceName = null) : base(default!) { }

        public bool EnableSensitiveData { get { throw null; } set { } }

        protected override void Dispose(bool disposing) { }

        public override System.Threading.Tasks.Task<GeneratedEmbeddings<TEmbedding>> GenerateAsync(System.Collections.Generic.IEnumerable<TInput> values, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public override object? GetService(System.Type serviceType, object? serviceKey = null) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public sealed partial class SpeechToTextClientBuilder
    {
        public SpeechToTextClientBuilder(ISpeechToTextClient innerClient) { }

        public SpeechToTextClientBuilder(System.Func<System.IServiceProvider, ISpeechToTextClient> innerClientFactory) { }

        public ISpeechToTextClient Build(System.IServiceProvider? services = null) { throw null; }

        public SpeechToTextClientBuilder Use(System.Func<ISpeechToTextClient, ISpeechToTextClient> clientFactory) { throw null; }

        public SpeechToTextClientBuilder Use(System.Func<ISpeechToTextClient, System.IServiceProvider, ISpeechToTextClient> clientFactory) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public static partial class SpeechToTextClientBuilderSpeechToTextClientExtensions
    {
        public static SpeechToTextClientBuilder AsBuilder(this ISpeechToTextClient innerClient) { throw null; }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    public static partial class ChatClientBuilderServiceCollectionExtensions
    {
        public static AI.ChatClientBuilder AddChatClient(this IServiceCollection serviceCollection, AI.IChatClient innerClient, ServiceLifetime lifetime = ServiceLifetime.Singleton) { throw null; }

        public static AI.ChatClientBuilder AddChatClient(this IServiceCollection serviceCollection, System.Func<System.IServiceProvider, AI.IChatClient> innerClientFactory, ServiceLifetime lifetime = ServiceLifetime.Singleton) { throw null; }

        public static AI.ChatClientBuilder AddKeyedChatClient(this IServiceCollection serviceCollection, object? serviceKey, AI.IChatClient innerClient, ServiceLifetime lifetime = ServiceLifetime.Singleton) { throw null; }

        public static AI.ChatClientBuilder AddKeyedChatClient(this IServiceCollection serviceCollection, object? serviceKey, System.Func<System.IServiceProvider, AI.IChatClient> innerClientFactory, ServiceLifetime lifetime = ServiceLifetime.Singleton) { throw null; }
    }

    public static partial class EmbeddingGeneratorBuilderServiceCollectionExtensions
    {
        public static AI.EmbeddingGeneratorBuilder<TInput, TEmbedding> AddEmbeddingGenerator<TInput, TEmbedding>(this IServiceCollection serviceCollection, AI.IEmbeddingGenerator<TInput, TEmbedding> innerGenerator, ServiceLifetime lifetime = ServiceLifetime.Singleton)
            where TEmbedding : AI.Embedding { throw null; }

        public static AI.EmbeddingGeneratorBuilder<TInput, TEmbedding> AddEmbeddingGenerator<TInput, TEmbedding>(this IServiceCollection serviceCollection, System.Func<System.IServiceProvider, AI.IEmbeddingGenerator<TInput, TEmbedding>> innerGeneratorFactory, ServiceLifetime lifetime = ServiceLifetime.Singleton)
            where TEmbedding : AI.Embedding { throw null; }

        public static AI.EmbeddingGeneratorBuilder<TInput, TEmbedding> AddKeyedEmbeddingGenerator<TInput, TEmbedding>(this IServiceCollection serviceCollection, object? serviceKey, AI.IEmbeddingGenerator<TInput, TEmbedding> innerGenerator, ServiceLifetime lifetime = ServiceLifetime.Singleton)
            where TEmbedding : AI.Embedding { throw null; }

        public static AI.EmbeddingGeneratorBuilder<TInput, TEmbedding> AddKeyedEmbeddingGenerator<TInput, TEmbedding>(this IServiceCollection serviceCollection, object? serviceKey, System.Func<System.IServiceProvider, AI.IEmbeddingGenerator<TInput, TEmbedding>> innerGeneratorFactory, ServiceLifetime lifetime = ServiceLifetime.Singleton)
            where TEmbedding : AI.Embedding { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public static partial class SpeechToTextClientBuilderServiceCollectionExtensions
    {
        public static AI.SpeechToTextClientBuilder AddKeyedSpeechToTextClient(this IServiceCollection serviceCollection, object serviceKey, AI.ISpeechToTextClient innerClient, ServiceLifetime lifetime = ServiceLifetime.Singleton) { throw null; }

        public static AI.SpeechToTextClientBuilder AddKeyedSpeechToTextClient(this IServiceCollection serviceCollection, object serviceKey, System.Func<System.IServiceProvider, AI.ISpeechToTextClient> innerClientFactory, ServiceLifetime lifetime = ServiceLifetime.Singleton) { throw null; }

        public static AI.SpeechToTextClientBuilder AddSpeechToTextClient(this IServiceCollection serviceCollection, AI.ISpeechToTextClient innerClient, ServiceLifetime lifetime = ServiceLifetime.Singleton) { throw null; }

        public static AI.SpeechToTextClientBuilder AddSpeechToTextClient(this IServiceCollection serviceCollection, System.Func<System.IServiceProvider, AI.ISpeechToTextClient> innerClientFactory, ServiceLifetime lifetime = ServiceLifetime.Singleton) { throw null; }
    }
}