//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.AI.Evaluation.Reporting
{
    public sealed partial class ChatDetails
    {
        public ChatDetails(params ChatTurnDetails[] turnDetails) { }

        public ChatDetails(System.Collections.Generic.IEnumerable<ChatTurnDetails> turnDetails) { }

        [System.Text.Json.Serialization.JsonConstructor]
        public ChatDetails(System.Collections.Generic.IList<ChatTurnDetails> turnDetails) { }

        public System.Collections.Generic.IList<ChatTurnDetails> TurnDetails { get { throw null; } set { } }
    }

    public static partial class ChatDetailsExtensions
    {
        public static void AddTurnDetails(this ChatDetails chatDetails, params ChatTurnDetails[] turnDetails) { }

        public static void AddTurnDetails(this ChatDetails chatDetails, System.Collections.Generic.IEnumerable<ChatTurnDetails> turnDetails) { }
    }

    public sealed partial class ChatTurnDetails
    {
        public ChatTurnDetails(System.TimeSpan latency, string? model = null, UsageDetails? usage = null, string? cacheKey = null, bool? cacheHit = null) { }

        public bool? CacheHit { get { throw null; } set { } }

        public string? CacheKey { get { throw null; } set { } }

        public System.TimeSpan Latency { get { throw null; } set { } }

        public string? Model { get { throw null; } set { } }

        public UsageDetails? Usage { get { throw null; } set { } }
    }

    public static partial class Defaults
    {
        public const string DefaultExecutionName = "Default";
        public const string DefaultIterationName = "1";
        public static System.TimeSpan DefaultTimeToLiveForCacheEntries { get { throw null; } }
    }

    public partial interface IEvaluationReportWriter
    {
        System.Threading.Tasks.ValueTask WriteReportAsync(System.Collections.Generic.IEnumerable<ScenarioRunResult> scenarioRunResults, System.Threading.CancellationToken cancellationToken = default);
    }

    public partial interface IEvaluationResponseCacheProvider
    {
        System.Threading.Tasks.ValueTask DeleteExpiredCacheEntriesAsync(System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask<Caching.Distributed.IDistributedCache> GetCacheAsync(string scenarioName, string iterationName, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask ResetAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    public partial interface IEvaluationResultStore
    {
        System.Threading.Tasks.ValueTask DeleteResultsAsync(string? executionName = null, string? scenarioName = null, string? iterationName = null, System.Threading.CancellationToken cancellationToken = default);
        System.Collections.Generic.IAsyncEnumerable<string> GetIterationNamesAsync(string executionName, string scenarioName, System.Threading.CancellationToken cancellationToken = default);
        System.Collections.Generic.IAsyncEnumerable<string> GetLatestExecutionNamesAsync(int? count = null, System.Threading.CancellationToken cancellationToken = default);
        System.Collections.Generic.IAsyncEnumerable<string> GetScenarioNamesAsync(string executionName, System.Threading.CancellationToken cancellationToken = default);
        System.Collections.Generic.IAsyncEnumerable<ScenarioRunResult> ReadResultsAsync(string? executionName = null, string? scenarioName = null, string? iterationName = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask WriteResultsAsync(System.Collections.Generic.IEnumerable<ScenarioRunResult> results, System.Threading.CancellationToken cancellationToken = default);
    }

    public sealed partial class ReportingConfiguration
    {
        public ReportingConfiguration(System.Collections.Generic.IEnumerable<IEvaluator> evaluators, IEvaluationResultStore resultStore, ChatConfiguration? chatConfiguration = null, IEvaluationResponseCacheProvider? responseCacheProvider = null, System.Collections.Generic.IEnumerable<string>? cachingKeys = null, string executionName = "Default", System.Func<EvaluationMetric, EvaluationMetricInterpretation?>? evaluationMetricInterpreter = null, System.Collections.Generic.IEnumerable<string>? tags = null) { }

        public System.Collections.Generic.IReadOnlyList<string> CachingKeys { get { throw null; } }

        public ChatConfiguration? ChatConfiguration { get { throw null; } }

        public System.Func<EvaluationMetric, EvaluationMetricInterpretation?>? EvaluationMetricInterpreter { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<IEvaluator> Evaluators { get { throw null; } }

        public string ExecutionName { get { throw null; } }

        public IEvaluationResponseCacheProvider? ResponseCacheProvider { get { throw null; } }

        public IEvaluationResultStore ResultStore { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<string>? Tags { get { throw null; } }

        public System.Threading.Tasks.ValueTask<ScenarioRun> CreateScenarioRunAsync(string scenarioName, string iterationName = "1", System.Collections.Generic.IEnumerable<string>? additionalCachingKeys = null, System.Collections.Generic.IEnumerable<string>? additionalTags = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class ScenarioRun : System.IAsyncDisposable
    {
        internal ScenarioRun() { }

        public ChatConfiguration? ChatConfiguration { get { throw null; } }

        public string ExecutionName { get { throw null; } }

        public string IterationName { get { throw null; } }

        public string ScenarioName { get { throw null; } }

        public System.Threading.Tasks.ValueTask DisposeAsync() { throw null; }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public static partial class ScenarioRunExtensions
    {
        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this ScenarioRun scenarioRun, ChatMessage userRequest, ChatMessage modelResponse, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this ScenarioRun scenarioRun, ChatMessage userRequest, ChatResponse modelResponse, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this ScenarioRun scenarioRun, ChatMessage modelResponse, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this ScenarioRun scenarioRun, ChatResponse modelResponse, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this ScenarioRun scenarioRun, string modelResponse, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this ScenarioRun scenarioRun, string userRequest, string modelResponse, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class ScenarioRunResult
    {
        public ScenarioRunResult(string scenarioName, string iterationName, string executionName, System.DateTime creationTime, System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, EvaluationResult evaluationResult, ChatDetails? chatDetails = null, System.Collections.Generic.IEnumerable<string>? tags = null) { }

        [System.Text.Json.Serialization.JsonConstructor]
        public ScenarioRunResult(string scenarioName, string iterationName, string executionName, System.DateTime creationTime, System.Collections.Generic.IList<ChatMessage> messages, ChatResponse modelResponse, EvaluationResult evaluationResult, ChatDetails? chatDetails = null, System.Collections.Generic.IList<string>? tags = null, int? formatVersion = null) { }

        public ChatDetails? ChatDetails { get { throw null; } set { } }

        public System.DateTime CreationTime { get { throw null; } set { } }

        public EvaluationResult EvaluationResult { get { throw null; } set { } }

        public string ExecutionName { get { throw null; } set { } }

        public int? FormatVersion { get { throw null; } set { } }

        public string IterationName { get { throw null; } set { } }

        public System.Collections.Generic.IList<ChatMessage> Messages { get { throw null; } set { } }

        public ChatResponse ModelResponse { get { throw null; } set { } }

        public string ScenarioName { get { throw null; } set { } }

        public System.Collections.Generic.IList<string>? Tags { get { throw null; } set { } }
    }

    public static partial class ScenarioRunResultExtensions
    {
        public static bool ContainsDiagnostics(this ScenarioRunResult result, System.Func<EvaluationDiagnostic, bool>? predicate = null) { throw null; }
    }
}

namespace Microsoft.Extensions.AI.Evaluation.Reporting.Formats.Html
{
    public sealed partial class HtmlReportWriter : IEvaluationReportWriter
    {
        public HtmlReportWriter(string reportFilePath) { }

        public System.Threading.Tasks.ValueTask WriteReportAsync(System.Collections.Generic.IEnumerable<ScenarioRunResult> scenarioRunResults, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }
}

namespace Microsoft.Extensions.AI.Evaluation.Reporting.Formats.Json
{
    public sealed partial class JsonReportWriter : IEvaluationReportWriter
    {
        public JsonReportWriter(string reportFilePath) { }

        public System.Threading.Tasks.ValueTask WriteReportAsync(System.Collections.Generic.IEnumerable<ScenarioRunResult> scenarioRunResults, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }
}

namespace Microsoft.Extensions.AI.Evaluation.Reporting.Storage
{
    public static partial class DiskBasedReportingConfiguration
    {
        public static ReportingConfiguration Create(string storageRootPath, System.Collections.Generic.IEnumerable<IEvaluator> evaluators, ChatConfiguration? chatConfiguration = null, bool enableResponseCaching = true, System.TimeSpan? timeToLiveForCacheEntries = null, System.Collections.Generic.IEnumerable<string>? cachingKeys = null, string executionName = "Default", System.Func<EvaluationMetric, EvaluationMetricInterpretation?>? evaluationMetricInterpreter = null, System.Collections.Generic.IEnumerable<string>? tags = null) { throw null; }
    }

    public sealed partial class DiskBasedResponseCacheProvider : IEvaluationResponseCacheProvider
    {
        public DiskBasedResponseCacheProvider(string storageRootPath, System.TimeSpan? timeToLiveForCacheEntries = null) { }

        public System.Threading.Tasks.ValueTask DeleteExpiredCacheEntriesAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.ValueTask<Caching.Distributed.IDistributedCache> GetCacheAsync(string scenarioName, string iterationName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.ValueTask ResetAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class DiskBasedResultStore : IEvaluationResultStore
    {
        public DiskBasedResultStore(string storageRootPath) { }

        public System.Threading.Tasks.ValueTask DeleteResultsAsync(string? executionName = null, string? scenarioName = null, string? iterationName = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<string> GetIterationNamesAsync(string executionName, string scenarioName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<string> GetLatestExecutionNamesAsync(int? count = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<string> GetScenarioNamesAsync(string executionName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<ScenarioRunResult> ReadResultsAsync(string? executionName = null, string? scenarioName = null, string? iterationName = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.ValueTask WriteResultsAsync(System.Collections.Generic.IEnumerable<ScenarioRunResult> results, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }
}