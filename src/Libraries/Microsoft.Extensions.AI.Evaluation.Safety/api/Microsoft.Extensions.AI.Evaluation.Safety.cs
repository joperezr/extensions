//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.AI.Evaluation.Safety
{
    public sealed partial class CodeVulnerabilityEvaluator : ContentSafetyEvaluator
    {
        public CodeVulnerabilityEvaluator() : base(default!, default!) { }

        public static string CodeVulnerabilityMetricName { get { throw null; } }

        public override System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public partial class ContentHarmEvaluator : ContentSafetyEvaluator
    {
        public ContentHarmEvaluator(System.Collections.Generic.IDictionary<string, string>? metricNames = null) : base(default!, default!) { }

        public sealed override System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public abstract partial class ContentSafetyEvaluator : IEvaluator
    {
        protected ContentSafetyEvaluator(string contentSafetyServiceAnnotationTask, System.Collections.Generic.IDictionary<string, string> metricNames) { }

        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public virtual System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateContentSafetyAsync(IChatClient contentSafetyServiceChatClient, System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, string contentSafetyServicePayloadFormat = "HumanSystem", bool includeMetricNamesInContentSafetyServicePayload = true, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected virtual System.Collections.Generic.IReadOnlyList<EvaluationContext>? FilterAdditionalContext(System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext) { throw null; }
    }

    public sealed partial class ContentSafetyServiceConfiguration
    {
        public ContentSafetyServiceConfiguration(Azure.Core.TokenCredential credential, string subscriptionId, string resourceGroupName, string projectName, System.Net.Http.HttpClient? httpClient = null, int timeoutInSecondsForRetries = 300) { }

        public Azure.Core.TokenCredential Credential { get { throw null; } }

        public System.Net.Http.HttpClient? HttpClient { get { throw null; } }

        public string ProjectName { get { throw null; } }

        public string ResourceGroupName { get { throw null; } }

        public string SubscriptionId { get { throw null; } }

        public int TimeoutInSecondsForRetries { get { throw null; } }
    }

    public static partial class ContentSafetyServiceConfigurationExtensions
    {
        public static ChatConfiguration ToChatConfiguration(this ContentSafetyServiceConfiguration contentSafetyServiceConfiguration, ChatConfiguration? originalChatConfiguration = null) { throw null; }

        public static ChatConfiguration ToChatConfiguration(this ContentSafetyServiceConfiguration contentSafetyServiceConfiguration, IChatClient originalChatClient) { throw null; }
    }

    public sealed partial class GroundednessProEvaluator : ContentSafetyEvaluator
    {
        public GroundednessProEvaluator() : base(default!, default!) { }

        public static string GroundednessProMetricName { get { throw null; } }

        public override System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected override System.Collections.Generic.IReadOnlyList<EvaluationContext>? FilterAdditionalContext(System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext) { throw null; }
    }

    public sealed partial class GroundednessProEvaluatorContext : EvaluationContext
    {
        public GroundednessProEvaluatorContext(string groundingContext) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public string GroundingContext { get { throw null; } }

        public static string GroundingContextName { get { throw null; } }
    }

    public sealed partial class HateAndUnfairnessEvaluator : ContentHarmEvaluator
    {
        public HateAndUnfairnessEvaluator() : base(default) { }

        public static string HateAndUnfairnessMetricName { get { throw null; } }
    }

    public sealed partial class IndirectAttackEvaluator : ContentSafetyEvaluator
    {
        public IndirectAttackEvaluator() : base(default!, default!) { }

        public static string IndirectAttackMetricName { get { throw null; } }
    }

    public sealed partial class ProtectedMaterialEvaluator : ContentSafetyEvaluator
    {
        public ProtectedMaterialEvaluator() : base(default!, default!) { }

        public static string ProtectedArtworkMetricName { get { throw null; } }

        public static string ProtectedFictionalCharactersMetricName { get { throw null; } }

        public static string ProtectedLogosAndBrandsMetricName { get { throw null; } }

        public static string ProtectedMaterialMetricName { get { throw null; } }

        public override System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class SelfHarmEvaluator : ContentHarmEvaluator
    {
        public SelfHarmEvaluator() : base(default) { }

        public static string SelfHarmMetricName { get { throw null; } }
    }

    public sealed partial class SexualEvaluator : ContentHarmEvaluator
    {
        public SexualEvaluator() : base(default) { }

        public static string SexualMetricName { get { throw null; } }
    }

    public sealed partial class UngroundedAttributesEvaluator : ContentSafetyEvaluator
    {
        public UngroundedAttributesEvaluator() : base(default!, default!) { }

        public static string UngroundedAttributesMetricName { get { throw null; } }

        public override System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected override System.Collections.Generic.IReadOnlyList<EvaluationContext>? FilterAdditionalContext(System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext) { throw null; }
    }

    public sealed partial class UngroundedAttributesEvaluatorContext : EvaluationContext
    {
        public UngroundedAttributesEvaluatorContext(string groundingContext) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public string GroundingContext { get { throw null; } }

        public static string GroundingContextName { get { throw null; } }
    }

    public sealed partial class ViolenceEvaluator : ContentHarmEvaluator
    {
        public ViolenceEvaluator() : base(default) { }

        public static string ViolenceMetricName { get { throw null; } }
    }
}