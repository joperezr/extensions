//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.Compliance.Classification
{
    [System.ComponentModel.TypeConverter(typeof(DataClassificationTypeConverter))]
    public readonly partial struct DataClassification : System.IEquatable<DataClassification>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public DataClassification(string taxonomyName, string value) { }

        public static DataClassification None { get { throw null; } }

        public string TaxonomyName { get { throw null; } }

        public static DataClassification Unknown { get { throw null; } }

        public string Value { get { throw null; } }

        public readonly bool Equals(DataClassification other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(DataClassification left, DataClassification right) { throw null; }

        public static bool operator !=(DataClassification left, DataClassification right) { throw null; }

        public override readonly string ToString() { throw null; }
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue | System.AttributeTargets.GenericParameter, AllowMultiple = true)]
    public partial class DataClassificationAttribute : System.Attribute
    {
        protected DataClassificationAttribute(DataClassification classification) { }

        public DataClassification Classification { get { throw null; } }

        public string Notes { get { throw null; } set { } }
    }

    public sealed partial class DataClassificationSet : System.IEquatable<DataClassificationSet>
    {
        public DataClassificationSet(DataClassification classification) { }

        public DataClassificationSet(params DataClassification[] classifications) { }

        public DataClassificationSet(System.Collections.Generic.IEnumerable<DataClassification> classifications) { }

        public bool Equals(DataClassificationSet? other) { throw null; }

        public override bool Equals(object? obj) { throw null; }

        public static DataClassificationSet FromDataClassification(DataClassification classification) { throw null; }

        public override int GetHashCode() { throw null; }

        public static implicit operator DataClassificationSet(DataClassification classification) { throw null; }

        public override string ToString() { throw null; }

        public DataClassificationSet Union(DataClassificationSet other) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0002", UrlFormat = "https://aka.ms/dotnet-extensions-warnings/{0}")]
    public partial class DataClassificationTypeConverter : System.ComponentModel.TypeConverter
    {
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }

        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) { throw null; }

        public override object? ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }

        public override bool IsValid(System.ComponentModel.ITypeDescriptorContext? context, object? value) { throw null; }
    }

    public sealed partial class NoDataClassificationAttribute : DataClassificationAttribute
    {
        public NoDataClassificationAttribute() : base(default) { }
    }

    public sealed partial class UnknownDataClassificationAttribute : DataClassificationAttribute
    {
        public UnknownDataClassificationAttribute() : base(default) { }
    }
}

namespace Microsoft.Extensions.Compliance.Redaction
{
    public partial interface IRedactionBuilder
    {
        DependencyInjection.IServiceCollection Services { get; }

        IRedactionBuilder SetFallbackRedactor<T>()
            where T : Redactor;
        IRedactionBuilder SetRedactor<T>(params Classification.DataClassificationSet[] classifications)
            where T : Redactor;
    }

    public partial interface IRedactorProvider
    {
        Redactor GetRedactor(Classification.DataClassificationSet classifications);
    }

    public sealed partial class NullRedactor : Redactor
    {
        public static NullRedactor Instance { get { throw null; } }

        public override int GetRedactedLength(System.ReadOnlySpan<char> input) { throw null; }

        public override int Redact(System.ReadOnlySpan<char> source, System.Span<char> destination) { throw null; }

        public override string Redact(string? source) { throw null; }
    }

    public sealed partial class NullRedactorProvider : IRedactorProvider
    {
        public static NullRedactorProvider Instance { get { throw null; } }

        public Redactor GetRedactor(Classification.DataClassificationSet classifications) { throw null; }
    }

    public abstract partial class Redactor
    {
        public abstract int GetRedactedLength(System.ReadOnlySpan<char> input);
        public int GetRedactedLength(string? input) { throw null; }

        public abstract int Redact(System.ReadOnlySpan<char> source, System.Span<char> destination);
        public string Redact(System.ReadOnlySpan<char> source) { throw null; }

        public int Redact(string? source, System.Span<char> destination) { throw null; }

        public virtual string Redact(string? source) { throw null; }

        [System.Runtime.CompilerServices.SkipLocalsInit]
        public int Redact<T>(T value, System.Span<char> destination, string? format = null, System.IFormatProvider? provider = null) { throw null; }

        [System.Runtime.CompilerServices.SkipLocalsInit]
        public string Redact<T>(T value, string? format = null, System.IFormatProvider? provider = null) { throw null; }

        [System.Runtime.CompilerServices.SkipLocalsInit]
        public bool TryRedact<T>(T value, System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider = null) { throw null; }
    }
}

namespace System.Text
{
    public static partial class RedactionStringBuilderExtensions
    {
        [Runtime.CompilerServices.SkipLocalsInit]
        public static StringBuilder AppendRedacted(this StringBuilder stringBuilder, Microsoft.Extensions.Compliance.Redaction.Redactor redactor, ReadOnlySpan<char> value) { throw null; }

        public static StringBuilder AppendRedacted(this StringBuilder stringBuilder, Microsoft.Extensions.Compliance.Redaction.Redactor redactor, string? value) { throw null; }
    }
}