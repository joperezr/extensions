//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.AI
{
    public sealed partial class AdditionalPropertiesDictionary : AdditionalPropertiesDictionary<object?>
    {
        public AdditionalPropertiesDictionary() { }

        public AdditionalPropertiesDictionary(System.Collections.Generic.IDictionary<string, object?> dictionary) { }

        public AdditionalPropertiesDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>> collection) { }

        public new AdditionalPropertiesDictionary Clone() { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("Count = {Count}")]
    public partial class AdditionalPropertiesDictionary<TValue> : System.Collections.Generic.IDictionary<string, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TValue>>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyDictionary<string, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string, TValue>>
    {
        public AdditionalPropertiesDictionary() { }

        public AdditionalPropertiesDictionary(System.Collections.Generic.IDictionary<string, TValue> dictionary) { }

        public AdditionalPropertiesDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TValue>> collection) { }

        public int Count { get { throw null; } }

        public TValue this[string key] { get { throw null; } set { } }

        public System.Collections.Generic.ICollection<string> Keys { get { throw null; } }

        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, TValue>>.IsReadOnly { get { throw null; } }

        System.Collections.Generic.IEnumerable<string> System.Collections.Generic.IReadOnlyDictionary<string, TValue>.Keys { get { throw null; } }

        System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<string, TValue>.Values { get { throw null; } }

        public System.Collections.Generic.ICollection<TValue> Values { get { throw null; } }

        public void Add(string key, TValue value) { }

        public void Clear() { }

        public AdditionalPropertiesDictionary<TValue> Clone() { throw null; }

        public bool ContainsKey(string key) { throw null; }

        public Enumerator GetEnumerator() { throw null; }

        public bool Remove(string key) { throw null; }

        void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, TValue>>.Add(System.Collections.Generic.KeyValuePair<string, TValue> item) { }

        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, TValue>>.Contains(System.Collections.Generic.KeyValuePair<string, TValue> item) { throw null; }

        void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<string, TValue>[] array, int arrayIndex) { }

        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, TValue>>.Remove(System.Collections.Generic.KeyValuePair<string, TValue> item) { throw null; }

        bool System.Collections.Generic.IDictionary<string, TValue>.TryGetValue(string key, out TValue value) { throw null; }

        System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TValue>>.GetEnumerator() { throw null; }

        bool System.Collections.Generic.IReadOnlyDictionary<string, TValue>.TryGetValue(string key, out TValue value) { throw null; }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }

        public bool TryAdd(string key, TValue value) { throw null; }

        public bool TryGetValue(string key, out TValue value) { throw null; }

        public bool TryGetValue<T>(string key, out T? value) { throw null; }

        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, TValue>>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Collections.Generic.KeyValuePair<string, TValue> Current { get { throw null; } }

            object System.Collections.IEnumerator.Current { get { throw null; } }

            public void Dispose() { }

            public bool MoveNext() { throw null; }

            public void Reset() { }
        }
    }

    [System.Text.Json.Serialization.JsonPolymorphic(TypeDiscriminatorPropertyName = "$type")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(DataContent), "data")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(ErrorContent), "error")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(FunctionCallContent), "functionCall")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(FunctionResultContent), "functionResult")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(TextContent), "text")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(TextReasoningContent), "reasoning")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(UriContent), "uri")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(UsageContent), "usage")]
    public partial class AIContent
    {
        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public object? RawRepresentation { get { throw null; } set { } }
    }

    public abstract partial class AIFunction : AITool
    {
        public virtual System.Text.Json.JsonElement JsonSchema { get { throw null; } }

        public virtual System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get { throw null; } }

        public virtual System.Text.Json.JsonElement? ReturnJsonSchema { get { throw null; } }

        public virtual System.Reflection.MethodInfo? UnderlyingMethod { get { throw null; } }

        public System.Threading.Tasks.ValueTask<object?> InvokeAsync(AIFunctionArguments? arguments = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected abstract System.Threading.Tasks.ValueTask<object?> InvokeCoreAsync(AIFunctionArguments arguments, System.Threading.CancellationToken cancellationToken);
    }

    [System.Diagnostics.DebuggerDisplay("Count = {Count}")]
    public partial class AIFunctionArguments : System.Collections.Generic.IDictionary<string, object?>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object?>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object?>>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyDictionary<string, object?>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string, object?>>
    {
        public AIFunctionArguments() { }

        public AIFunctionArguments(System.Collections.Generic.IDictionary<string, object?>? arguments, System.Collections.Generic.IEqualityComparer<string>? comparer) { }

        public AIFunctionArguments(System.Collections.Generic.IDictionary<string, object?>? arguments) { }

        public AIFunctionArguments(System.Collections.Generic.IEqualityComparer<string>? comparer) { }

        public System.Collections.Generic.IDictionary<object, object?>? Context { get { throw null; } set { } }

        public int Count { get { throw null; } }

        public object? this[string key] { get { throw null; } set { } }

        public System.Collections.Generic.ICollection<string> Keys { get { throw null; } }

        public System.IServiceProvider? Services { get { throw null; } set { } }

        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.IsReadOnly { get { throw null; } }

        System.Collections.Generic.IEnumerable<string> System.Collections.Generic.IReadOnlyDictionary<string, object>.Keys { get { throw null; } }

        System.Collections.Generic.IEnumerable<object?> System.Collections.Generic.IReadOnlyDictionary<string, object>.Values { get { throw null; } }

        public System.Collections.Generic.ICollection<object?> Values { get { throw null; } }

        public void Add(string key, object? value) { }

        public void Clear() { }

        public bool ContainsKey(string key) { throw null; }

        public void CopyTo(System.Collections.Generic.KeyValuePair<string, object?>[] array, int arrayIndex) { }

        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object?>> GetEnumerator() { throw null; }

        public bool Remove(string key) { throw null; }

        void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Add(System.Collections.Generic.KeyValuePair<string, object?> item) { }

        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Contains(System.Collections.Generic.KeyValuePair<string, object?> item) { throw null; }

        bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>.Remove(System.Collections.Generic.KeyValuePair<string, object?> item) { throw null; }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }

        public bool TryGetValue(string key, out object? value) { throw null; }
    }

    public static partial class AIFunctionFactory
    {
        public static AIFunction Create(System.Delegate method, AIFunctionFactoryOptions? options) { throw null; }

        public static AIFunction Create(System.Delegate method, string? name = null, string? description = null, System.Text.Json.JsonSerializerOptions? serializerOptions = null) { throw null; }

        public static AIFunction Create(System.Reflection.MethodInfo method, System.Func<AIFunctionArguments, object> createInstanceFunc, AIFunctionFactoryOptions? options = null) { throw null; }

        public static AIFunction Create(System.Reflection.MethodInfo method, object? target, AIFunctionFactoryOptions? options) { throw null; }

        public static AIFunction Create(System.Reflection.MethodInfo method, object? target, string? name = null, string? description = null, System.Text.Json.JsonSerializerOptions? serializerOptions = null) { throw null; }
    }

    public sealed partial class AIFunctionFactoryOptions
    {
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? AdditionalProperties { get { throw null; } set { } }

        public System.Func<System.Reflection.ParameterInfo, ParameterBindingOptions>? ConfigureParameterBinding { get { throw null; } set { } }

        public string? Description { get { throw null; } set { } }

        public bool ExcludeResultSchema { get { throw null; } set { } }

        public AIJsonSchemaCreateOptions? JsonSchemaCreateOptions { get { throw null; } set { } }

        public System.Func<object?, System.Type?, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<object?>>? MarshalResult { get { throw null; } set { } }

        public string? Name { get { throw null; } set { } }

        public System.Text.Json.JsonSerializerOptions? SerializerOptions { get { throw null; } set { } }

        public readonly partial struct ParameterBindingOptions : System.IEquatable<ParameterBindingOptions>
        {
            private readonly object _dummy;
            private readonly int _dummyPrimitive;
            public System.Func<System.Reflection.ParameterInfo, AIFunctionArguments, object?>? BindParameter { get { throw null; } init { } }

            public bool ExcludeFromSchema { get { throw null; } init { } }

            [System.Runtime.CompilerServices.CompilerGenerated]
            public readonly bool Equals(ParameterBindingOptions other) { throw null; }

            [System.Runtime.CompilerServices.CompilerGenerated]
            public override readonly bool Equals(object obj) { throw null; }

            [System.Runtime.CompilerServices.CompilerGenerated]
            public override readonly int GetHashCode() { throw null; }

            [System.Runtime.CompilerServices.CompilerGenerated]
            public static bool operator ==(ParameterBindingOptions left, ParameterBindingOptions right) { throw null; }

            [System.Runtime.CompilerServices.CompilerGenerated]
            public static bool operator !=(ParameterBindingOptions left, ParameterBindingOptions right) { throw null; }

            [System.Runtime.CompilerServices.CompilerGenerated]
            public override readonly string ToString() { throw null; }
        }
    }

    public readonly partial struct AIJsonSchemaCreateContext
    {
        public System.Text.Json.Serialization.Metadata.JsonTypeInfo? BaseTypeInfo { get { throw null; } }

        public System.Type? DeclaringType { get { throw null; } }

        public System.Reflection.ICustomAttributeProvider? ParameterAttributeProvider { get { throw null; } }

        public System.ReadOnlySpan<string> Path { get { throw null; } }

        public System.Reflection.ICustomAttributeProvider? PropertyAttributeProvider { get { throw null; } }

        public System.Text.Json.Serialization.Metadata.JsonPropertyInfo? PropertyInfo { get { throw null; } }

        public System.Text.Json.Serialization.Metadata.JsonTypeInfo TypeInfo { get { throw null; } }

        public readonly TAttribute? GetCustomAttribute<TAttribute>(bool inherit = false)
            where TAttribute : System.Attribute { throw null; }
    }

    public sealed partial record AIJsonSchemaCreateOptions()
    {
        public static AIJsonSchemaCreateOptions Default { get { throw null; } }

        public System.Func<System.Reflection.ParameterInfo, bool>? IncludeParameter { get { throw null; } init { } }

        public bool IncludeSchemaKeyword { get { throw null; } init { } }

        public AIJsonSchemaTransformOptions? TransformOptions { get { throw null; } init { } }

        public System.Func<AIJsonSchemaCreateContext, System.Text.Json.Nodes.JsonNode, System.Text.Json.Nodes.JsonNode>? TransformSchemaNode { get { throw null; } init { } }
    }

    public sealed partial class AIJsonSchemaTransformCache
    {
        public AIJsonSchemaTransformCache(AIJsonSchemaTransformOptions transformOptions) { }

        public AIJsonSchemaTransformOptions TransformOptions { get { throw null; } }

        public System.Text.Json.JsonElement GetOrCreateTransformedSchema(AIFunction function) { throw null; }

        public System.Text.Json.JsonElement? GetOrCreateTransformedSchema(ChatResponseFormatJson responseFormat) { throw null; }
    }

    public readonly partial struct AIJsonSchemaTransformContext
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public bool IsCollectionElementSchema { get { throw null; } }

        public bool IsDictionaryValueSchema { get { throw null; } }

        public System.ReadOnlySpan<string> Path { get { throw null; } }

        public string? PropertyName { get { throw null; } }
    }

    public sealed partial record AIJsonSchemaTransformOptions()
    {
        public bool ConvertBooleanSchemas { get { throw null; } init { } }

        public bool DisallowAdditionalProperties { get { throw null; } init { } }

        public bool MoveDefaultKeywordToDescription { get { throw null; } init { } }

        public bool RequireAllProperties { get { throw null; } init { } }

        public System.Func<AIJsonSchemaTransformContext, System.Text.Json.Nodes.JsonNode, System.Text.Json.Nodes.JsonNode>? TransformSchemaNode { get { throw null; } init { } }

        public bool UseNullableKeyword { get { throw null; } init { } }
    }

    public static partial class AIJsonUtilities
    {
        public static System.Text.Json.JsonSerializerOptions DefaultOptions { get { throw null; } }

        public static void AddAIContentType(this System.Text.Json.JsonSerializerOptions options, System.Type contentType, string typeDiscriminatorId) { }

        public static void AddAIContentType<TContent>(this System.Text.Json.JsonSerializerOptions options, string typeDiscriminatorId)
            where TContent : AIContent { }

        public static System.Text.Json.JsonElement CreateFunctionJsonSchema(System.Reflection.MethodBase method, string? title = null, string? description = null, System.Text.Json.JsonSerializerOptions? serializerOptions = null, AIJsonSchemaCreateOptions? inferenceOptions = null) { throw null; }

        public static System.Text.Json.JsonElement CreateJsonSchema(System.Type? type, string? description = null, bool hasDefaultValue = false, object? defaultValue = null, System.Text.Json.JsonSerializerOptions? serializerOptions = null, AIJsonSchemaCreateOptions? inferenceOptions = null) { throw null; }

        public static string HashDataToString(System.ReadOnlySpan<object?> values, System.Text.Json.JsonSerializerOptions? serializerOptions = null) { throw null; }

        public static System.Text.Json.JsonElement TransformSchema(System.Text.Json.JsonElement schema, AIJsonSchemaTransformOptions transformOptions) { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public abstract partial class AITool
    {
        public virtual System.Collections.Generic.IReadOnlyDictionary<string, object?> AdditionalProperties { get { throw null; } }

        public virtual string Description { get { throw null; } }

        public virtual string Name { get { throw null; } }

        public override string ToString() { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("Auto")]
    public sealed partial class AutoChatToolMode : ChatToolMode
    {
        public AutoChatToolMode() { }

        public override bool Equals(object? obj) { throw null; }

        public override int GetHashCode() { throw null; }
    }

    public sealed partial class BinaryEmbedding : Embedding
    {
        public BinaryEmbedding(System.Collections.BitArray vector) { }

        [System.Text.Json.Serialization.JsonIgnore]
        public override int Dimensions { get { throw null; } }

        [System.Text.Json.Serialization.JsonConverter(typeof(VectorConverter))]
        public System.Collections.BitArray Vector { get { throw null; } set { } }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public sealed partial class VectorConverter : System.Text.Json.Serialization.JsonConverter<System.Collections.BitArray>
        {
            public override System.Collections.BitArray Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { throw null; }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, System.Collections.BitArray value, System.Text.Json.JsonSerializerOptions options) { }
        }
    }

    public static partial class ChatClientExtensions
    {
        public static object GetRequiredService(this IChatClient client, System.Type serviceType, object? serviceKey = null) { throw null; }

        public static TService GetRequiredService<TService>(this IChatClient client, object? serviceKey = null) { throw null; }

        public static System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(this IChatClient client, ChatMessage chatMessage, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(this IChatClient client, string chatMessage, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static TService? GetService<TService>(this IChatClient client, object? serviceKey = null) { throw null; }

        public static System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(this IChatClient client, ChatMessage chatMessage, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(this IChatClient client, string chatMessage, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public partial class ChatClientMetadata
    {
        public ChatClientMetadata(string? providerName = null, System.Uri? providerUri = null, string? defaultModelId = null) { }

        public string? DefaultModelId { get { throw null; } }

        public string? ProviderName { get { throw null; } }

        public System.Uri? ProviderUri { get { throw null; } }
    }

    [System.Text.Json.Serialization.JsonConverter(typeof(Converter))]
    public readonly partial struct ChatFinishReason : System.IEquatable<ChatFinishReason>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        [System.Text.Json.Serialization.JsonConstructor]
        public ChatFinishReason(string value) { }

        public static ChatFinishReason ContentFilter { get { throw null; } }

        public static ChatFinishReason Length { get { throw null; } }

        public static ChatFinishReason Stop { get { throw null; } }

        public static ChatFinishReason ToolCalls { get { throw null; } }

        public string Value { get { throw null; } }

        public readonly bool Equals(ChatFinishReason other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(ChatFinishReason left, ChatFinishReason right) { throw null; }

        public static bool operator !=(ChatFinishReason left, ChatFinishReason right) { throw null; }

        public override readonly string ToString() { throw null; }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public sealed partial class Converter : System.Text.Json.Serialization.JsonConverter<ChatFinishReason>
        {
            public override ChatFinishReason Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { throw null; }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, ChatFinishReason value, System.Text.Json.JsonSerializerOptions options) { }
        }
    }

    [System.Diagnostics.DebuggerDisplay("[{Role}] {ContentForDebuggerDisplay}{EllipsesForDebuggerDisplay,nq}")]
    public partial class ChatMessage
    {
        [System.Text.Json.Serialization.JsonConstructor]
        public ChatMessage() { }

        public ChatMessage(ChatRole role, System.Collections.Generic.IList<AIContent>? contents) { }

        public ChatMessage(ChatRole role, string? content) { }

        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public string? AuthorName { get { throw null; } set { } }

        public System.Collections.Generic.IList<AIContent> Contents { get { throw null; } set { } }

        public string? MessageId { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public object? RawRepresentation { get { throw null; } set { } }

        public ChatRole Role { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public string Text { get { throw null; } }

        public ChatMessage Clone() { throw null; }

        public override string ToString() { throw null; }
    }

    public partial class ChatOptions
    {
        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public bool? AllowMultipleToolCalls { get { throw null; } set { } }

        public string? ConversationId { get { throw null; } set { } }

        public float? FrequencyPenalty { get { throw null; } set { } }

        public string? Instructions { get { throw null; } set { } }

        public int? MaxOutputTokens { get { throw null; } set { } }

        public string? ModelId { get { throw null; } set { } }

        public float? PresencePenalty { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public System.Func<IChatClient, object?>? RawRepresentationFactory { get { throw null; } set { } }

        public ChatResponseFormat? ResponseFormat { get { throw null; } set { } }

        public long? Seed { get { throw null; } set { } }

        public System.Collections.Generic.IList<string>? StopSequences { get { throw null; } set { } }

        public float? Temperature { get { throw null; } set { } }

        public ChatToolMode? ToolMode { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IList<AITool>? Tools { get { throw null; } set { } }

        public int? TopK { get { throw null; } set { } }

        public float? TopP { get { throw null; } set { } }

        public virtual ChatOptions Clone() { throw null; }
    }

    public partial class ChatResponse
    {
        public ChatResponse() { }

        public ChatResponse(ChatMessage message) { }

        public ChatResponse(System.Collections.Generic.IList<ChatMessage>? messages) { }

        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public string? ConversationId { get { throw null; } set { } }

        public System.DateTimeOffset? CreatedAt { get { throw null; } set { } }

        public ChatFinishReason? FinishReason { get { throw null; } set { } }

        public System.Collections.Generic.IList<ChatMessage> Messages { get { throw null; } set { } }

        public string? ModelId { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public object? RawRepresentation { get { throw null; } set { } }

        public string? ResponseId { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public string Text { get { throw null; } }

        public UsageDetails? Usage { get { throw null; } set { } }

        public ChatResponseUpdate[] ToChatResponseUpdates() { throw null; }

        public override string ToString() { throw null; }
    }

    public static partial class ChatResponseExtensions
    {
        public static void AddMessages(this System.Collections.Generic.IList<ChatMessage> list, ChatResponse response) { }

        public static void AddMessages(this System.Collections.Generic.IList<ChatMessage> list, ChatResponseUpdate update, System.Func<AIContent, bool>? filter = null) { }

        public static void AddMessages(this System.Collections.Generic.IList<ChatMessage> list, System.Collections.Generic.IEnumerable<ChatResponseUpdate> updates) { }

        public static System.Threading.Tasks.Task AddMessagesAsync(this System.Collections.Generic.IList<ChatMessage> list, System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> updates, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static ChatResponse ToChatResponse(this System.Collections.Generic.IEnumerable<ChatResponseUpdate> updates) { throw null; }

        public static System.Threading.Tasks.Task<ChatResponse> ToChatResponseAsync(this System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> updates, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Text.Json.Serialization.JsonPolymorphic(TypeDiscriminatorPropertyName = "$type")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(ChatResponseFormatText), "text")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(ChatResponseFormatJson), "json")]
    public partial class ChatResponseFormat
    {
        internal ChatResponseFormat() { }

        public static ChatResponseFormatJson Json { get { throw null; } }

        public static ChatResponseFormatText Text { get { throw null; } }

        public static ChatResponseFormatJson ForJsonSchema(System.Text.Json.JsonElement schema, string? schemaName = null, string? schemaDescription = null) { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public sealed partial class ChatResponseFormatJson : ChatResponseFormat
    {
        [System.Text.Json.Serialization.JsonConstructor]
        public ChatResponseFormatJson(System.Text.Json.JsonElement? schema, string? schemaName = null, string? schemaDescription = null) { }

        public System.Text.Json.JsonElement? Schema { get { throw null; } }

        public string? SchemaDescription { get { throw null; } }

        public string? SchemaName { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("Text")]
    public sealed partial class ChatResponseFormatText : ChatResponseFormat
    {
        public ChatResponseFormatText() { }

        public override bool Equals(object? obj) { throw null; }

        public override int GetHashCode() { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("[{Role}] {ContentForDebuggerDisplay}{EllipsesForDebuggerDisplay,nq}")]
    public partial class ChatResponseUpdate
    {
        [System.Text.Json.Serialization.JsonConstructor]
        public ChatResponseUpdate() { }

        public ChatResponseUpdate(ChatRole? role, System.Collections.Generic.IList<AIContent>? contents) { }

        public ChatResponseUpdate(ChatRole? role, string? content) { }

        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public string? AuthorName { get { throw null; } set { } }

        public System.Collections.Generic.IList<AIContent> Contents { get { throw null; } set { } }

        public string? ConversationId { get { throw null; } set { } }

        public System.DateTimeOffset? CreatedAt { get { throw null; } set { } }

        public ChatFinishReason? FinishReason { get { throw null; } set { } }

        public string? MessageId { get { throw null; } set { } }

        public string? ModelId { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public object? RawRepresentation { get { throw null; } set { } }

        public string? ResponseId { get { throw null; } set { } }

        public ChatRole? Role { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public string Text { get { throw null; } }

        public override string ToString() { throw null; }
    }

    [System.Text.Json.Serialization.JsonConverter(typeof(Converter))]
    [System.Diagnostics.DebuggerDisplay("{Value,nq}")]
    public readonly partial struct ChatRole : System.IEquatable<ChatRole>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        [System.Text.Json.Serialization.JsonConstructor]
        public ChatRole(string value) { }

        public static ChatRole Assistant { get { throw null; } }

        public static ChatRole System { get { throw null; } }

        public static ChatRole Tool { get { throw null; } }

        public static ChatRole User { get { throw null; } }

        public string Value { get { throw null; } }

        public readonly bool Equals(ChatRole other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(ChatRole left, ChatRole right) { throw null; }

        public static bool operator !=(ChatRole left, ChatRole right) { throw null; }

        public override readonly string ToString() { throw null; }

        [System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public sealed partial class Converter : System.Text.Json.Serialization.JsonConverter<ChatRole>
        {
            public override ChatRole Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { throw null; }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, ChatRole value, System.Text.Json.JsonSerializerOptions options) { }
        }
    }

    [System.Text.Json.Serialization.JsonPolymorphic(TypeDiscriminatorPropertyName = "$type")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(NoneChatToolMode), "none")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(AutoChatToolMode), "auto")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(RequiredChatToolMode), "required")]
    public partial class ChatToolMode
    {
        internal ChatToolMode() { }

        public static AutoChatToolMode Auto { get { throw null; } }

        public static NoneChatToolMode None { get { throw null; } }

        public static RequiredChatToolMode RequireAny { get { throw null; } }

        public static RequiredChatToolMode RequireSpecific(string functionName) { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public partial class DataContent : AIContent
    {
        public DataContent(System.ReadOnlyMemory<byte> data, string mediaType) { }

        [System.Text.Json.Serialization.JsonConstructor]
        public DataContent(string uri, string? mediaType = null) { }

        public DataContent(System.Uri uri, string? mediaType = null) { }

        [System.Text.Json.Serialization.JsonIgnore]
        public System.ReadOnlyMemory<char> Base64Data { get { throw null; } }

        [System.Text.Json.Serialization.JsonIgnore]
        public System.ReadOnlyMemory<byte> Data { get { throw null; } }

        [System.Text.Json.Serialization.JsonIgnore]
        public string MediaType { get { throw null; } }

        [System.Diagnostics.CodeAnalysis.StringSyntax("Uri")]
        public string Uri { get { throw null; } }

        public bool HasTopLevelMediaType(string topLevelType) { throw null; }
    }

    public partial class DelegatingAIFunction : AIFunction
    {
        protected DelegatingAIFunction(AIFunction innerFunction) { }

        public override System.Collections.Generic.IReadOnlyDictionary<string, object?> AdditionalProperties { get { throw null; } }

        public override string Description { get { throw null; } }

        protected AIFunction InnerFunction { get { throw null; } }

        public override System.Text.Json.JsonElement JsonSchema { get { throw null; } }

        public override System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get { throw null; } }

        public override string Name { get { throw null; } }

        public override System.Text.Json.JsonElement? ReturnJsonSchema { get { throw null; } }

        public override System.Reflection.MethodInfo? UnderlyingMethod { get { throw null; } }

        protected override System.Threading.Tasks.ValueTask<object?> InvokeCoreAsync(AIFunctionArguments arguments, System.Threading.CancellationToken cancellationToken) { throw null; }

        public override string ToString() { throw null; }
    }

    public partial class DelegatingChatClient : IChatClient, System.IDisposable
    {
        protected DelegatingChatClient(IChatClient innerClient) { }

        protected IChatClient InnerClient { get { throw null; } }

        public void Dispose() { }

        protected virtual void Dispose(bool disposing) { }

        public virtual System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public virtual object? GetService(System.Type serviceType, object? serviceKey = null) { throw null; }

        public virtual System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public partial class DelegatingEmbeddingGenerator<TInput, TEmbedding> : IEmbeddingGenerator<TInput, TEmbedding>, IEmbeddingGenerator, System.IDisposable where TEmbedding : Embedding
    {
        protected DelegatingEmbeddingGenerator(IEmbeddingGenerator<TInput, TEmbedding> innerGenerator) { }

        protected IEmbeddingGenerator<TInput, TEmbedding> InnerGenerator { get { throw null; } }

        public void Dispose() { }

        protected virtual void Dispose(bool disposing) { }

        public virtual System.Threading.Tasks.Task<GeneratedEmbeddings<TEmbedding>> GenerateAsync(System.Collections.Generic.IEnumerable<TInput> values, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public virtual object? GetService(System.Type serviceType, object? serviceKey = null) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public partial class DelegatingSpeechToTextClient : ISpeechToTextClient, System.IDisposable
    {
        protected DelegatingSpeechToTextClient(ISpeechToTextClient innerClient) { }

        protected ISpeechToTextClient InnerClient { get { throw null; } }

        public void Dispose() { }

        protected virtual void Dispose(bool disposing) { }

        public virtual object? GetService(System.Type serviceType, object? serviceKey = null) { throw null; }

        public virtual System.Collections.Generic.IAsyncEnumerable<SpeechToTextResponseUpdate> GetStreamingTextAsync(System.IO.Stream audioSpeechStream, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public virtual System.Threading.Tasks.Task<SpeechToTextResponse> GetTextAsync(System.IO.Stream audioSpeechStream, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Text.Json.Serialization.JsonPolymorphic(TypeDiscriminatorPropertyName = "$type")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(BinaryEmbedding), "binary")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(Embedding<byte>), "uint8")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(Embedding<sbyte>), "int8")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(Embedding<System.Half>), "float16")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(Embedding<float>), "float32")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(Embedding<double>), "float64")]
    [System.Diagnostics.DebuggerDisplay("Dimensions = {Dimensions}")]
    public partial class Embedding
    {
        protected Embedding() { }

        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public System.DateTimeOffset? CreatedAt { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public virtual int Dimensions { get { throw null; } }

        public string? ModelId { get { throw null; } set { } }
    }

    public partial class EmbeddingGenerationOptions
    {
        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public int? Dimensions { get { throw null; } set { } }

        public string? ModelId { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public System.Func<IEmbeddingGenerator, object?>? RawRepresentationFactory { get { throw null; } set { } }

        public virtual EmbeddingGenerationOptions Clone() { throw null; }
    }

    public static partial class EmbeddingGeneratorExtensions
    {
        public static System.Threading.Tasks.Task<(TInput Value, TEmbedding Embedding)[]> GenerateAndZipAsync<TInput, TEmbedding>(this IEmbeddingGenerator<TInput, TEmbedding> generator, System.Collections.Generic.IEnumerable<TInput> values, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default)
            where TEmbedding : Embedding { throw null; }

        public static System.Threading.Tasks.Task<TEmbedding> GenerateAsync<TInput, TEmbedding>(this IEmbeddingGenerator<TInput, TEmbedding> generator, TInput value, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default)
            where TEmbedding : Embedding { throw null; }

        public static System.Threading.Tasks.Task<System.ReadOnlyMemory<TEmbeddingElement>> GenerateVectorAsync<TInput, TEmbeddingElement>(this IEmbeddingGenerator<TInput, Embedding<TEmbeddingElement>> generator, TInput value, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static object GetRequiredService(this IEmbeddingGenerator generator, System.Type serviceType, object? serviceKey = null) { throw null; }

        public static TService GetRequiredService<TService>(this IEmbeddingGenerator generator, object? serviceKey = null) { throw null; }

        public static TService? GetService<TService>(this IEmbeddingGenerator generator, object? serviceKey = null) { throw null; }
    }

    public partial class EmbeddingGeneratorMetadata
    {
        public EmbeddingGeneratorMetadata(string? providerName = null, System.Uri? providerUri = null, string? defaultModelId = null, int? defaultModelDimensions = null) { }

        public int? DefaultModelDimensions { get { throw null; } }

        public string? DefaultModelId { get { throw null; } }

        public string? ProviderName { get { throw null; } }

        public System.Uri? ProviderUri { get { throw null; } }
    }

    public sealed partial class Embedding<T> : Embedding
    {
        public Embedding(System.ReadOnlyMemory<T> vector) { }

        [System.Text.Json.Serialization.JsonIgnore]
        public override int Dimensions { get { throw null; } }

        public System.ReadOnlyMemory<T> Vector { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public partial class ErrorContent : AIContent
    {
        public ErrorContent(string? message) { }

        public string? Details { get { throw null; } set { } }

        public string? ErrorCode { get { throw null; } set { } }

        public string Message { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public sealed partial class FunctionCallContent : AIContent
    {
        [System.Text.Json.Serialization.JsonConstructor]
        public FunctionCallContent(string callId, string name, System.Collections.Generic.IDictionary<string, object?>? arguments = null) { }

        public System.Collections.Generic.IDictionary<string, object?>? Arguments { get { throw null; } set { } }

        public string CallId { get { throw null; } }

        [System.Text.Json.Serialization.JsonIgnore]
        public System.Exception? Exception { get { throw null; } set { } }

        public string Name { get { throw null; } }

        public static FunctionCallContent CreateFromParsedArguments<TEncoding>(TEncoding encodedArguments, string callId, string name, System.Func<TEncoding, System.Collections.Generic.IDictionary<string, object?>?> argumentParser) { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public sealed partial class FunctionResultContent : AIContent
    {
        [System.Text.Json.Serialization.JsonConstructor]
        public FunctionResultContent(string callId, object? result) { }

        public string CallId { get { throw null; } }

        [System.Text.Json.Serialization.JsonIgnore]
        public System.Exception? Exception { get { throw null; } set { } }

        public object? Result { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("Count = {Count}")]
    public sealed partial class GeneratedEmbeddings<TEmbedding> : System.Collections.Generic.IList<TEmbedding>, System.Collections.Generic.ICollection<TEmbedding>, System.Collections.Generic.IEnumerable<TEmbedding>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyList<TEmbedding>, System.Collections.Generic.IReadOnlyCollection<TEmbedding> where TEmbedding : Embedding
    {
        public GeneratedEmbeddings() { }

        public GeneratedEmbeddings(System.Collections.Generic.IEnumerable<TEmbedding> embeddings) { }

        public GeneratedEmbeddings(int capacity) { }

        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public int Count { get { throw null; } }

        public TEmbedding this[int index] { get { throw null; } set { } }

        bool System.Collections.Generic.ICollection<TEmbedding>.IsReadOnly { get { throw null; } }

        public UsageDetails? Usage { get { throw null; } set { } }

        public void Add(TEmbedding item) { }

        public void AddRange(System.Collections.Generic.IEnumerable<TEmbedding> items) { }

        public void Clear() { }

        public bool Contains(TEmbedding item) { throw null; }

        public void CopyTo(TEmbedding[] array, int arrayIndex) { }

        public System.Collections.Generic.IEnumerator<TEmbedding> GetEnumerator() { throw null; }

        public int IndexOf(TEmbedding item) { throw null; }

        public void Insert(int index, TEmbedding item) { }

        public bool Remove(TEmbedding item) { throw null; }

        public void RemoveAt(int index) { }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    }

    public partial class HostedCodeInterpreterTool : AITool
    {
    }

    public partial class HostedWebSearchTool : AITool
    {
    }

    public partial interface IChatClient : System.IDisposable
    {
        System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
        object? GetService(System.Type serviceType, object? serviceKey = null);
        System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
    }

    public partial interface IEmbeddingGenerator : System.IDisposable
    {
        object? GetService(System.Type serviceType, object? serviceKey = null);
    }

    public partial interface IEmbeddingGenerator<in TInput, TEmbedding> : IEmbeddingGenerator, System.IDisposable where TEmbedding : Embedding
    {
        System.Threading.Tasks.Task<GeneratedEmbeddings<TEmbedding>> GenerateAsync(System.Collections.Generic.IEnumerable<TInput> values, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public partial interface ISpeechToTextClient : System.IDisposable
    {
        object? GetService(System.Type serviceType, object? serviceKey = null);
        System.Collections.Generic.IAsyncEnumerable<SpeechToTextResponseUpdate> GetStreamingTextAsync(System.IO.Stream audioSpeechStream, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<SpeechToTextResponse> GetTextAsync(System.IO.Stream audioSpeechStream, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
    }

    [System.Diagnostics.DebuggerDisplay("None")]
    public sealed partial class NoneChatToolMode : ChatToolMode
    {
        public NoneChatToolMode() { }

        public override bool Equals(object? obj) { throw null; }

        public override int GetHashCode() { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public sealed partial class RequiredChatToolMode : ChatToolMode
    {
        public RequiredChatToolMode(string? requiredFunctionName) { }

        public string? RequiredFunctionName { get { throw null; } }

        public override bool Equals(object? obj) { throw null; }

        public override int GetHashCode() { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public static partial class SpeechToTextClientExtensions
    {
        public static TService? GetService<TService>(this ISpeechToTextClient client, object? serviceKey = null) { throw null; }

        public static System.Collections.Generic.IAsyncEnumerable<SpeechToTextResponseUpdate> GetStreamingTextAsync(this ISpeechToTextClient client, DataContent audioSpeechContent, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<SpeechToTextResponse> GetTextAsync(this ISpeechToTextClient client, DataContent audioSpeechContent, SpeechToTextOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public partial class SpeechToTextClientMetadata
    {
        public SpeechToTextClientMetadata(string? providerName = null, System.Uri? providerUri = null, string? defaultModelId = null) { }

        public string? DefaultModelId { get { throw null; } }

        public string? ProviderName { get { throw null; } }

        public System.Uri? ProviderUri { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public partial class SpeechToTextOptions
    {
        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public string? ModelId { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public System.Func<ISpeechToTextClient, object?>? RawRepresentationFactory { get { throw null; } set { } }

        public string? SpeechLanguage { get { throw null; } set { } }

        public int? SpeechSampleRate { get { throw null; } set { } }

        public string? TextLanguage { get { throw null; } set { } }

        public virtual SpeechToTextOptions Clone() { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public partial class SpeechToTextResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]
        public SpeechToTextResponse() { }

        public SpeechToTextResponse(System.Collections.Generic.IList<AIContent> contents) { }

        public SpeechToTextResponse(string? content) { }

        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public System.Collections.Generic.IList<AIContent> Contents { get { throw null; } set { } }

        public System.TimeSpan? EndTime { get { throw null; } set { } }

        public string? ModelId { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public object? RawRepresentation { get { throw null; } set { } }

        public string? ResponseId { get { throw null; } set { } }

        public System.TimeSpan? StartTime { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public string Text { get { throw null; } }

        public UsageDetails? Usage { get { throw null; } set { } }

        public SpeechToTextResponseUpdate[] ToSpeechToTextResponseUpdates() { throw null; }

        public override string ToString() { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public partial class SpeechToTextResponseUpdate
    {
        [System.Text.Json.Serialization.JsonConstructor]
        public SpeechToTextResponseUpdate() { }

        public SpeechToTextResponseUpdate(System.Collections.Generic.IList<AIContent> contents) { }

        public SpeechToTextResponseUpdate(string? content) { }

        public AdditionalPropertiesDictionary? AdditionalProperties { get { throw null; } set { } }

        public System.Collections.Generic.IList<AIContent> Contents { get { throw null; } set { } }

        public System.TimeSpan? EndTime { get { throw null; } set { } }

        public SpeechToTextResponseUpdateKind Kind { get { throw null; } set { } }

        public string? ModelId { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public object? RawRepresentation { get { throw null; } set { } }

        public string? ResponseId { get { throw null; } set { } }

        public System.TimeSpan? StartTime { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public string Text { get { throw null; } }

        public override string ToString() { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    public static partial class SpeechToTextResponseUpdateExtensions
    {
        public static SpeechToTextResponse ToSpeechToTextResponse(this System.Collections.Generic.IEnumerable<SpeechToTextResponseUpdate> updates) { throw null; }

        public static System.Threading.Tasks.Task<SpeechToTextResponse> ToSpeechToTextResponseAsync(this System.Collections.Generic.IAsyncEnumerable<SpeechToTextResponseUpdate> updates, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]
    [System.Text.Json.Serialization.JsonConverter(typeof(Converter))]
    public readonly partial struct SpeechToTextResponseUpdateKind : System.IEquatable<SpeechToTextResponseUpdateKind>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        [System.Text.Json.Serialization.JsonConstructor]
        public SpeechToTextResponseUpdateKind(string value) { }

        public static SpeechToTextResponseUpdateKind Error { get { throw null; } }

        public static SpeechToTextResponseUpdateKind SessionClose { get { throw null; } }

        public static SpeechToTextResponseUpdateKind SessionOpen { get { throw null; } }

        public static SpeechToTextResponseUpdateKind TextUpdated { get { throw null; } }

        public static SpeechToTextResponseUpdateKind TextUpdating { get { throw null; } }

        public string Value { get { throw null; } }

        public readonly bool Equals(SpeechToTextResponseUpdateKind other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(SpeechToTextResponseUpdateKind left, SpeechToTextResponseUpdateKind right) { throw null; }

        public static bool operator !=(SpeechToTextResponseUpdateKind left, SpeechToTextResponseUpdateKind right) { throw null; }

        public override readonly string ToString() { throw null; }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public sealed partial class Converter : System.Text.Json.Serialization.JsonConverter<SpeechToTextResponseUpdateKind>
        {
            public override SpeechToTextResponseUpdateKind Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { throw null; }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, SpeechToTextResponseUpdateKind value, System.Text.Json.JsonSerializerOptions options) { }
        }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public sealed partial class TextContent : AIContent
    {
        public TextContent(string? text) { }

        public string Text { get { throw null; } set { } }

        public override string ToString() { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public sealed partial class TextReasoningContent : AIContent
    {
        public TextReasoningContent(string? text) { }

        public string Text { get { throw null; } set { } }

        public override string ToString() { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public partial class UriContent : AIContent
    {
        public UriContent(string uri, string mediaType) { }

        [System.Text.Json.Serialization.JsonConstructor]
        public UriContent(System.Uri uri, string mediaType) { }

        public string MediaType { get { throw null; } set { } }

        public System.Uri Uri { get { throw null; } set { } }

        public bool HasTopLevelMediaType(string topLevelType) { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public partial class UsageContent : AIContent
    {
        public UsageContent() { }

        [System.Text.Json.Serialization.JsonConstructor]
        public UsageContent(UsageDetails details) { }

        public UsageDetails Details { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]
    public partial class UsageDetails
    {
        public AdditionalPropertiesDictionary<long>? AdditionalCounts { get { throw null; } set { } }

        public long? InputTokenCount { get { throw null; } set { } }

        public long? OutputTokenCount { get { throw null; } set { } }

        public long? TotalTokenCount { get { throw null; } set { } }

        public void Add(UsageDetails usage) { }
    }
}