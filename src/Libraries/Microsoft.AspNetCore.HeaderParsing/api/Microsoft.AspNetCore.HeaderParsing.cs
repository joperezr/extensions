//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.AspNetCore.HeaderParsing
{
    public static partial class CommonHeaders
    {
        public static HeaderSetup<System.Collections.Generic.IReadOnlyList<Net.Http.Headers.MediaTypeHeaderValue>> Accept { get { throw null; } }

        public static HeaderSetup<System.Collections.Generic.IReadOnlyList<Net.Http.Headers.StringWithQualityHeaderValue>> AcceptEncoding { get { throw null; } }

        public static HeaderSetup<System.Collections.Generic.IReadOnlyList<Net.Http.Headers.StringWithQualityHeaderValue>> AcceptLanguage { get { throw null; } }

        public static HeaderSetup<Net.Http.Headers.CacheControlHeaderValue> CacheControl { get { throw null; } }

        public static HeaderSetup<Net.Http.Headers.ContentDispositionHeaderValue> ContentDisposition { get { throw null; } }

        public static HeaderSetup<Net.Http.Headers.MediaTypeHeaderValue> ContentType { get { throw null; } }

        public static HeaderSetup<System.Collections.Generic.IReadOnlyList<Net.Http.Headers.CookieHeaderValue>> Cookie { get { throw null; } }

        public static HeaderSetup<System.DateTimeOffset> Date { get { throw null; } }

        public static HeaderSetup<HostHeaderValue> Host { get { throw null; } }

        public static HeaderSetup<System.Collections.Generic.IReadOnlyList<Net.Http.Headers.EntityTagHeaderValue>> IfMatch { get { throw null; } }

        public static HeaderSetup<System.Collections.Generic.IReadOnlyList<Net.Http.Headers.EntityTagHeaderValue>> IfModifiedSince { get { throw null; } }

        public static HeaderSetup<System.Collections.Generic.IReadOnlyList<Net.Http.Headers.EntityTagHeaderValue>> IfNoneMatch { get { throw null; } }

        public static HeaderSetup<Net.Http.Headers.RangeConditionHeaderValue> IfRange { get { throw null; } }

        public static HeaderSetup<System.DateTimeOffset> IfUnmodifiedSince { get { throw null; } }

        public static HeaderSetup<Net.Http.Headers.RangeHeaderValue> Range { get { throw null; } }

        public static HeaderSetup<System.Uri> Referer { get { throw null; } }

        public static HeaderSetup<System.Collections.Generic.IReadOnlyList<System.Net.IPAddress>> XForwardedFor { get { throw null; } }
    }

    public sealed partial class HeaderKey<T>
    {
        internal HeaderKey() { }

        public string Name { get { throw null; } }

        public override string ToString() { throw null; }
    }

    public abstract partial class HeaderParser<T>
    {
        public abstract bool TryParse(Extensions.Primitives.StringValues values, out T? result, out string? error);
    }

    public sealed partial class HeaderParsingFeature
    {
        internal HeaderParsingFeature() { }

        public bool TryGetHeaderValue<T>(HeaderKey<T> header, out T? value, out ParsingResult result) { throw null; }

        public bool TryGetHeaderValue<T>(HeaderKey<T> header, out T? value) { throw null; }
    }

    public partial class HeaderParsingOptions
    {
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int DefaultMaxCachedValuesPerHeader { get { throw null; } set { } }

        public System.Collections.Generic.IDictionary<string, Extensions.Primitives.StringValues> DefaultValues { get { throw null; } set { } }

        public System.Collections.Generic.IDictionary<string, int> MaxCachedValuesPerHeader { get { throw null; } set { } }
    }

    public partial class HeaderSetup<THeader>
    {
        public HeaderSetup(string headerName, HeaderParser<THeader> instance, bool cacheable = false) { }

        public HeaderSetup(string headerName, System.Type parserType, bool cacheable = false) { }

        public bool Cacheable { get { throw null; } }

        public string HeaderName { get { throw null; } }

        public HeaderParser<THeader>? ParserInstance { get { throw null; } }

        public System.Type? ParserType { get { throw null; } }
    }

    public readonly partial struct HostHeaderValue : System.IEquatable<HostHeaderValue>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public HostHeaderValue(string host, int? port) { }

        public string Host { get { throw null; } }

        public int? Port { get { throw null; } }

        public readonly bool Equals(HostHeaderValue other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(HostHeaderValue left, HostHeaderValue right) { throw null; }

        public static bool operator !=(HostHeaderValue left, HostHeaderValue right) { throw null; }

        public override readonly string ToString() { throw null; }

        public static bool TryParse(string value, out HostHeaderValue result) { throw null; }
    }

    public partial interface IHeaderRegistry
    {
        HeaderKey<T> Register<T>(HeaderSetup<T> setup);
    }

    public enum ParsingResult
    {
        Success = 0,
        Error = 1,
        NotFound = 2
    }
}

namespace Microsoft.AspNetCore.Http
{
    public static partial class HeaderParsingHttpRequestExtensions
    {
        public static HeaderParsing.HeaderParsingFeature GetHeaderParsing(this HttpRequest request) { throw null; }

        public static bool TryGetHeaderValue<T>(this HttpRequest request, HeaderParsing.HeaderKey<T> header, out T? value, out HeaderParsing.ParsingResult result) { throw null; }

        public static bool TryGetHeaderValue<T>(this HttpRequest request, HeaderParsing.HeaderKey<T> header, out T? value) { throw null; }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    public static partial class HeaderParsingServiceCollectionExtensions
    {
        public static IServiceCollection AddHeaderParsing(this IServiceCollection services, Configuration.IConfigurationSection section) { throw null; }

        public static IServiceCollection AddHeaderParsing(this IServiceCollection services, System.Action<AspNetCore.HeaderParsing.HeaderParsingOptions> configure) { throw null; }

        public static IServiceCollection AddHeaderParsing(this IServiceCollection services) { throw null; }
    }
}