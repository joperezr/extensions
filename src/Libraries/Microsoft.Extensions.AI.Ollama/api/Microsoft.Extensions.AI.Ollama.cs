//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.AI
{
    public sealed partial class OllamaChatClient : IChatClient, System.IDisposable
    {
        public OllamaChatClient(string endpoint, string? modelId = null, System.Net.Http.HttpClient? httpClient = null) { }

        public OllamaChatClient(System.Uri endpoint, string? modelId = null, System.Net.Http.HttpClient? httpClient = null) { }

        public System.Text.Json.JsonSerializerOptions ToolCallJsonSerializerOptions { get { throw null; } set { } }

        public void Dispose() { }

        public System.Threading.Tasks.Task<ChatResponse> GetResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        object? IChatClient.GetService(System.Type serviceType, object? serviceKey) { throw null; }
    }

    public sealed partial class OllamaEmbeddingGenerator : IEmbeddingGenerator<string, Embedding<float>>, IEmbeddingGenerator, System.IDisposable
    {
        public OllamaEmbeddingGenerator(string endpoint, string? modelId = null, System.Net.Http.HttpClient? httpClient = null) { }

        public OllamaEmbeddingGenerator(System.Uri endpoint, string? modelId = null, System.Net.Http.HttpClient? httpClient = null) { }

        public void Dispose() { }

        public System.Threading.Tasks.Task<GeneratedEmbeddings<Embedding<float>>> GenerateAsync(System.Collections.Generic.IEnumerable<string> values, EmbeddingGenerationOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        object? IEmbeddingGenerator.GetService(System.Type serviceType, object? serviceKey) { throw null; }
    }
}