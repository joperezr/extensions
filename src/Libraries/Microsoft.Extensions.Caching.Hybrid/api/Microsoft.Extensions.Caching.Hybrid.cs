//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.Caching.Hybrid
{
    public partial class HybridCacheOptions
    {
        public HybridCacheEntryOptions? DefaultEntryOptions { get { throw null; } set { } }

        public bool DisableCompression { get { throw null; } set { } }

        public int MaximumKeyLength { get { throw null; } set { } }

        public long MaximumPayloadBytes { get { throw null; } set { } }

        public bool ReportTagMetrics { get { throw null; } set { } }
    }

    public partial interface IHybridCacheBuilder
    {
        DependencyInjection.IServiceCollection Services { get; }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    public static partial class HybridCacheBuilderExtensions
    {
        public static Caching.Hybrid.IHybridCacheBuilder AddSerializer<T>(this Caching.Hybrid.IHybridCacheBuilder builder, Caching.Hybrid.IHybridCacheSerializer<T> serializer) { throw null; }

        public static Caching.Hybrid.IHybridCacheBuilder AddSerializer<T, TImplementation>(this Caching.Hybrid.IHybridCacheBuilder builder)
            where TImplementation : class, Caching.Hybrid.IHybridCacheSerializer<T> { throw null; }

        public static Caching.Hybrid.IHybridCacheBuilder AddSerializerFactory(this Caching.Hybrid.IHybridCacheBuilder builder, Caching.Hybrid.IHybridCacheSerializerFactory factory) { throw null; }

        public static Caching.Hybrid.IHybridCacheBuilder AddSerializerFactory<TImplementation>(this Caching.Hybrid.IHybridCacheBuilder builder)
            where TImplementation : class, Caching.Hybrid.IHybridCacheSerializerFactory { throw null; }
    }

    public static partial class HybridCacheServiceExtensions
    {
        public static Caching.Hybrid.IHybridCacheBuilder AddHybridCache(this IServiceCollection services, System.Action<Caching.Hybrid.HybridCacheOptions> setupAction) { throw null; }

        public static Caching.Hybrid.IHybridCacheBuilder AddHybridCache(this IServiceCollection services) { throw null; }
    }
}