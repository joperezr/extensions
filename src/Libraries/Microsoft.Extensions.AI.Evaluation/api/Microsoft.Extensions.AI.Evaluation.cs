//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.AI.Evaluation
{
    public sealed partial class BooleanMetric : EvaluationMetric<bool?>
    {
        public BooleanMetric(string name, bool? value = null, string? reason = null) : base(default!, default, default) { }
    }

    public sealed partial class ChatConfiguration
    {
        public ChatConfiguration(IChatClient chatClient) { }

        public IChatClient ChatClient { get { throw null; } }
    }

    public static partial class ChatMessageExtensions
    {
        public static string RenderText(this ChatMessage message) { throw null; }

        public static string RenderText(this System.Collections.Generic.IEnumerable<ChatMessage> messages) { throw null; }

        public static bool TryGetUserRequest(this System.Collections.Generic.IEnumerable<ChatMessage> messages, out ChatMessage? userRequest, out System.Collections.Generic.IReadOnlyList<ChatMessage> remainingMessages) { throw null; }

        public static bool TryGetUserRequest(this System.Collections.Generic.IEnumerable<ChatMessage> messages, out ChatMessage? userRequest) { throw null; }
    }

    public static partial class ChatResponseExtensions
    {
        public static string RenderText(this ChatResponse response) { throw null; }
    }

    public sealed partial class CompositeEvaluator : IEvaluator
    {
        public CompositeEvaluator(params IEvaluator[] evaluators) { }

        public CompositeEvaluator(System.Collections.Generic.IEnumerable<IEvaluator> evaluators) { }

        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public abstract partial class EvaluationContext
    {
        protected EvaluationContext(string name, params AIContent[] contents) { }

        protected EvaluationContext(string name, System.Collections.Generic.IEnumerable<AIContent> contents) { }

        protected EvaluationContext(string name, string content) { }

        public System.Collections.Generic.IList<AIContent> Contents { get { throw null; } set { } }

        public string Name { get { throw null; } set { } }
    }

    public sealed partial class EvaluationDiagnostic
    {
        public EvaluationDiagnostic(EvaluationDiagnosticSeverity severity, string message) { }

        public string Message { get { throw null; } set { } }

        public EvaluationDiagnosticSeverity Severity { get { throw null; } set { } }

        public static EvaluationDiagnostic Error(string message) { throw null; }

        public static EvaluationDiagnostic Informational(string message) { throw null; }

        public override string ToString() { throw null; }

        public static EvaluationDiagnostic Warning(string message) { throw null; }
    }

    public enum EvaluationDiagnosticSeverity
    {
        Informational = 0,
        Warning = 1,
        Error = 2
    }

    [System.Text.Json.Serialization.JsonDerivedType(typeof(NumericMetric), "numeric")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(BooleanMetric), "boolean")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(StringMetric), "string")]
    [System.Text.Json.Serialization.JsonDerivedType(typeof(EvaluationMetric), "none")]
    public partial class EvaluationMetric
    {
        public EvaluationMetric(string name, string? reason = null) { }

        public System.Collections.Generic.IDictionary<string, EvaluationContext>? Context { get { throw null; } set { } }

        public System.Collections.Generic.IList<EvaluationDiagnostic>? Diagnostics { get { throw null; } set { } }

        public EvaluationMetricInterpretation? Interpretation { get { throw null; } set { } }

        public System.Collections.Generic.IDictionary<string, string>? Metadata { get { throw null; } set { } }

        public string Name { get { throw null; } set { } }

        public string? Reason { get { throw null; } set { } }
    }

    public static partial class EvaluationMetricExtensions
    {
        public static void AddDiagnostics(this EvaluationMetric metric, params EvaluationDiagnostic[] diagnostics) { }

        public static void AddDiagnostics(this EvaluationMetric metric, System.Collections.Generic.IEnumerable<EvaluationDiagnostic> diagnostics) { }

        public static void AddOrUpdateChatMetadata(this EvaluationMetric metric, ChatResponse response, System.TimeSpan? duration = null) { }

        public static void AddOrUpdateContext(this EvaluationMetric metric, params EvaluationContext[] context) { }

        public static void AddOrUpdateContext(this EvaluationMetric metric, System.Collections.Generic.IEnumerable<EvaluationContext> context) { }

        public static void AddOrUpdateMetadata(this EvaluationMetric metric, System.Collections.Generic.IDictionary<string, string> metadata) { }

        public static void AddOrUpdateMetadata(this EvaluationMetric metric, string name, string value) { }

        public static bool ContainsDiagnostics(this EvaluationMetric metric, System.Func<EvaluationDiagnostic, bool>? predicate = null) { throw null; }
    }

    public sealed partial class EvaluationMetricInterpretation
    {
        public EvaluationMetricInterpretation(EvaluationRating rating = EvaluationRating.Unknown, bool failed = false, string? reason = null) { }

        public bool Failed { get { throw null; } set { } }

        public EvaluationRating Rating { get { throw null; } set { } }

        public string? Reason { get { throw null; } set { } }
    }

    public partial class EvaluationMetric<T> : EvaluationMetric
    {
        protected EvaluationMetric(string name, T? value, string? reason = null) : base(default!, default) { }

        public T? Value { get { throw null; } set { } }
    }

    public enum EvaluationRating
    {
        Unknown = 0,
        Inconclusive = 1,
        Unacceptable = 2,
        Poor = 3,
        Average = 4,
        Good = 5,
        Exceptional = 6
    }

    public sealed partial class EvaluationResult
    {
        public EvaluationResult(params EvaluationMetric[] metrics) { }

        [System.Text.Json.Serialization.JsonConstructor]
        public EvaluationResult(System.Collections.Generic.IDictionary<string, EvaluationMetric> metrics) { }

        public EvaluationResult(System.Collections.Generic.IEnumerable<EvaluationMetric> metrics) { }

        public System.Collections.Generic.IDictionary<string, EvaluationMetric> Metrics { get { throw null; } set { } }

        public T Get<T>(string metricName)
            where T : EvaluationMetric { throw null; }

        public bool TryGet<T>(string metricName, out T? value)
            where T : EvaluationMetric { throw null; }
    }

    public static partial class EvaluationResultExtensions
    {
        public static void AddDiagnosticsToAllMetrics(this EvaluationResult result, params EvaluationDiagnostic[] diagnostics) { }

        public static void AddDiagnosticsToAllMetrics(this EvaluationResult result, System.Collections.Generic.IEnumerable<EvaluationDiagnostic> diagnostics) { }

        public static void AddOrUpdateChatMetadataInAllMetrics(this EvaluationResult result, ChatResponse response, System.TimeSpan? duration = null) { }

        public static void AddOrUpdateContextInAllMetrics(this EvaluationResult result, params EvaluationContext[] context) { }

        public static void AddOrUpdateContextInAllMetrics(this EvaluationResult result, System.Collections.Generic.IEnumerable<EvaluationContext> context) { }

        public static void AddOrUpdateMetadataInAllMetrics(this EvaluationResult result, System.Collections.Generic.IDictionary<string, string> metadata) { }

        public static void AddOrUpdateMetadataInAllMetrics(this EvaluationResult result, string name, string value) { }

        public static bool ContainsDiagnostics(this EvaluationResult result, System.Func<EvaluationDiagnostic, bool>? predicate = null) { throw null; }

        public static void Interpret(this EvaluationResult result, System.Func<EvaluationMetric, EvaluationMetricInterpretation?> interpretationProvider) { }
    }

    public static partial class EvaluatorExtensions
    {
        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this IEvaluator evaluator, ChatMessage userRequest, ChatMessage modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this IEvaluator evaluator, ChatMessage userRequest, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this IEvaluator evaluator, ChatMessage modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this IEvaluator evaluator, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this IEvaluator evaluator, string modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(this IEvaluator evaluator, string userRequest, string modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public partial interface IEvaluator
    {
        System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get; }

        System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default);
    }

    public sealed partial class NumericMetric : EvaluationMetric<double?>
    {
        public NumericMetric(string name, double? value = null, string? reason = null) : base(default!, default, default) { }
    }

    public sealed partial class StringMetric : EvaluationMetric<string>
    {
        public StringMetric(string name, string? value = null, string? reason = null) : base(default!, default, default) { }
    }
}