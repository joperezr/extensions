//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.DependencyInjection
{
    public static partial class ApplicationEnricherServiceCollectionExtensions
    {
        public static IServiceCollection AddServiceLogEnricher(this IServiceCollection services, Configuration.IConfigurationSection section) { throw null; }

        public static IServiceCollection AddServiceLogEnricher(this IServiceCollection services, System.Action<Diagnostics.Enrichment.ApplicationLogEnricherOptions> configure) { throw null; }

        public static IServiceCollection AddServiceLogEnricher(this IServiceCollection services) { throw null; }
    }

    public static partial class LatencyConsoleExtensions
    {
        public static IServiceCollection AddConsoleLatencyDataExporter(this IServiceCollection services, Configuration.IConfigurationSection section) { throw null; }

        public static IServiceCollection AddConsoleLatencyDataExporter(this IServiceCollection services, System.Action<Diagnostics.Latency.LatencyConsoleOptions> configure) { throw null; }

        public static IServiceCollection AddConsoleLatencyDataExporter(this IServiceCollection services) { throw null; }
    }

    public static partial class LatencyContextExtensions
    {
        public static IServiceCollection AddLatencyContext(this IServiceCollection services, Configuration.IConfigurationSection section) { throw null; }

        public static IServiceCollection AddLatencyContext(this IServiceCollection services, System.Action<Diagnostics.Latency.LatencyContextOptions> configure) { throw null; }

        public static IServiceCollection AddLatencyContext(this IServiceCollection services) { throw null; }
    }

    public static partial class ProcessEnricherServiceCollectionExtensions
    {
        public static IServiceCollection AddProcessLogEnricher(this IServiceCollection services, Configuration.IConfigurationSection section) { throw null; }

        public static IServiceCollection AddProcessLogEnricher(this IServiceCollection services, System.Action<Diagnostics.Enrichment.ProcessLogEnricherOptions> configure) { throw null; }

        public static IServiceCollection AddProcessLogEnricher(this IServiceCollection services) { throw null; }
    }
}

namespace Microsoft.Extensions.Diagnostics.Enrichment
{
    public static partial class ApplicationEnricherTags
    {
        public const string ApplicationName = "service.name";
        public const string BuildVersion = "service.version";
        public const string DeploymentRing = "DeploymentRing";
        public const string EnvironmentName = "deployment.environment";
        public static System.Collections.Generic.IReadOnlyList<string> DimensionNames { get { throw null; } }
    }

    public partial class ApplicationLogEnricherOptions
    {
        public bool ApplicationName { get { throw null; } set { } }

        public bool BuildVersion { get { throw null; } set { } }

        public bool DeploymentRing { get { throw null; } set { } }

        public bool EnvironmentName { get { throw null; } set { } }
    }

    public static partial class ProcessEnricherTagNames
    {
        public const string ProcessId = "process.pid";
        public const string ThreadId = "thread.id";
        public static System.Collections.Generic.IReadOnlyList<string> DimensionNames { get { throw null; } }
    }

    public partial class ProcessLogEnricherOptions
    {
        public bool ProcessId { get { throw null; } set { } }

        public bool ThreadId { get { throw null; } set { } }
    }
}

namespace Microsoft.Extensions.Diagnostics.Latency
{
    public partial class LatencyConsoleOptions
    {
        public bool OutputCheckpoints { get { throw null; } set { } }

        public bool OutputMeasures { get { throw null; } set { } }

        public bool OutputTags { get { throw null; } set { } }
    }

    public partial class LatencyContextOptions
    {
        public bool ThrowOnUnregisteredNames { get { throw null; } set { } }
    }
}

namespace Microsoft.Extensions.Diagnostics.Sampling
{
    public partial class RandomProbabilisticSamplerFilterRule
    {
        public RandomProbabilisticSamplerFilterRule(double probability, string? categoryName = null, Logging.LogLevel? logLevel = null, int? eventId = null, string? eventName = null) { }

        public string? CategoryName { get { throw null; } }

        public int? EventId { get { throw null; } }

        public string? EventName { get { throw null; } }

        public Logging.LogLevel? LogLevel { get { throw null; } }

        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double Probability { get { throw null; } }
    }

    public partial class RandomProbabilisticSamplerOptions
    {
        [System.ComponentModel.DataAnnotations.Required]
        [Options.ValidateEnumeratedItems]
        public System.Collections.Generic.IList<RandomProbabilisticSamplerFilterRule> Rules { get { throw null; } set { } }
    }
}

namespace Microsoft.Extensions.Logging
{
    public partial class LoggerEnrichmentOptions
    {
        public bool CaptureStackTraces { get { throw null; } set { } }

        public bool IncludeExceptionMessage { get { throw null; } set { } }

        [System.ComponentModel.DataAnnotations.Range(2048, 32768)]
        public int MaxStackTraceLength { get { throw null; } set { } }

        public bool UseFileInfoForStackTraces { get { throw null; } set { } }
    }

    public partial class LoggerRedactionOptions
    {
        public bool ApplyDiscriminator { get { throw null; } set { } }
    }

    public static partial class LoggingEnrichmentExtensions
    {
        public static ILoggingBuilder EnableEnrichment(this ILoggingBuilder builder, Configuration.IConfigurationSection section) { throw null; }

        public static ILoggingBuilder EnableEnrichment(this ILoggingBuilder builder, System.Action<LoggerEnrichmentOptions> configure) { throw null; }

        public static ILoggingBuilder EnableEnrichment(this ILoggingBuilder builder) { throw null; }
    }

    public static partial class LoggingRedactionExtensions
    {
        public static ILoggingBuilder EnableRedaction(this ILoggingBuilder builder, Configuration.IConfigurationSection section) { throw null; }

        public static ILoggingBuilder EnableRedaction(this ILoggingBuilder builder, System.Action<LoggerRedactionOptions> configure) { throw null; }

        public static ILoggingBuilder EnableRedaction(this ILoggingBuilder builder) { throw null; }
    }

    public static partial class SamplingLoggerBuilderExtensions
    {
        public static ILoggingBuilder AddRandomProbabilisticSampler(this ILoggingBuilder builder, Configuration.IConfiguration configuration) { throw null; }

        public static ILoggingBuilder AddRandomProbabilisticSampler(this ILoggingBuilder builder, System.Action<Diagnostics.Sampling.RandomProbabilisticSamplerOptions> configure) { throw null; }

        public static ILoggingBuilder AddRandomProbabilisticSampler(this ILoggingBuilder builder, double probability, LogLevel? level = null) { throw null; }

        public static ILoggingBuilder AddSampler(this ILoggingBuilder builder, LoggingSampler sampler) { throw null; }

        public static ILoggingBuilder AddSampler<T>(this ILoggingBuilder builder)
            where T : LoggingSampler { throw null; }

        public static ILoggingBuilder AddTraceBasedSampler(this ILoggingBuilder builder) { throw null; }
    }
}