//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.AI.Evaluation.NLP
{
    public sealed partial class BLEUEvaluator : IEvaluator
    {
        public static string BLEUMetricName { get { throw null; } }

        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class BLEUEvaluatorContext : EvaluationContext
    {
        public BLEUEvaluatorContext(System.Collections.Generic.IEnumerable<string> references) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public BLEUEvaluatorContext(params string[] references) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public System.Collections.Generic.IReadOnlyList<string> References { get { throw null; } }

        public static string ReferencesContextName { get { throw null; } }
    }

    public sealed partial class F1Evaluator : IEvaluator
    {
        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string F1MetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class F1EvaluatorContext : EvaluationContext
    {
        public F1EvaluatorContext(string groundTruth) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public string GroundTruth { get { throw null; } }

        public static string GroundTruthContextName { get { throw null; } }
    }

    public sealed partial class GLEUEvaluator : IEvaluator
    {
        public System.Collections.Generic.IReadOnlyCollection<string> EvaluationMetricNames { get { throw null; } }

        public static string GLEUMetricName { get { throw null; } }

        public System.Threading.Tasks.ValueTask<EvaluationResult> EvaluateAsync(System.Collections.Generic.IEnumerable<ChatMessage> messages, ChatResponse modelResponse, ChatConfiguration? chatConfiguration = null, System.Collections.Generic.IEnumerable<EvaluationContext>? additionalContext = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class GLEUEvaluatorContext : EvaluationContext
    {
        public GLEUEvaluatorContext(System.Collections.Generic.IEnumerable<string> references) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public GLEUEvaluatorContext(params string[] references) : base(default!, default(System.Collections.Generic.IEnumerable<AIContent>)!) { }

        public System.Collections.Generic.IReadOnlyList<string> References { get { throw null; } }

        public static string ReferencesContextName { get { throw null; } }
    }
}