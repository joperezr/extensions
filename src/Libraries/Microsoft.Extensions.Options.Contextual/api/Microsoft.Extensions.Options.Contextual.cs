//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.DependencyInjection
{
    public static partial class ContextualOptionsServiceCollectionExtensions
    {
        public static IServiceCollection AddContextualOptions(this IServiceCollection services) { throw null; }

        public static IServiceCollection Configure<TOptions>(this IServiceCollection services, System.Action<Options.Contextual.IOptionsContext, TOptions> configure)
            where TOptions : class { throw null; }

        public static IServiceCollection Configure<TOptions>(this IServiceCollection services, System.Func<Options.Contextual.IOptionsContext, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Options.Contextual.Provider.IConfigureContextualOptions<TOptions>>> loadOptions)
            where TOptions : class { throw null; }

        public static IServiceCollection Configure<TOptions>(this IServiceCollection services, string? name, System.Action<Options.Contextual.IOptionsContext, TOptions> configure)
            where TOptions : class { throw null; }

        public static IServiceCollection Configure<TOptions>(this IServiceCollection services, string? name, System.Func<Options.Contextual.IOptionsContext, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Options.Contextual.Provider.IConfigureContextualOptions<TOptions>>> loadOptions)
            where TOptions : class { throw null; }

        public static IServiceCollection ConfigureAll<TOptions>(this IServiceCollection services, System.Action<Options.Contextual.IOptionsContext, TOptions> configure)
            where TOptions : class { throw null; }

        public static IServiceCollection ConfigureAll<TOptions>(this IServiceCollection services, System.Func<Options.Contextual.IOptionsContext, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Options.Contextual.Provider.IConfigureContextualOptions<TOptions>>> loadOptions)
            where TOptions : class { throw null; }
    }
}

namespace Microsoft.Extensions.Options.Contextual
{
    public partial interface IContextualOptions<TOptions, TContext>
        where TOptions : class where TContext : IOptionsContext
    {
        System.Threading.Tasks.ValueTask<TOptions> GetAsync(in TContext context, System.Threading.CancellationToken cancellationToken);
    }

    public partial interface INamedContextualOptions<TOptions, TContext> : IContextualOptions<TOptions, TContext> where TOptions : class where TContext : IOptionsContext
    {
        System.Threading.Tasks.ValueTask<TOptions> GetAsync(string name, in TContext context, System.Threading.CancellationToken cancellationToken);
    }

    public partial interface IOptionsContext
    {
        void PopulateReceiver<T>(T receiver)
            where T : Provider.IOptionsContextReceiver;
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited = false, AllowMultiple = false)]
    [System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")]
    public sealed partial class OptionsContextAttribute : System.Attribute
    {
    }
}

namespace Microsoft.Extensions.Options.Contextual.Provider
{
    public partial interface IConfigureContextualOptions<in TOptions> : System.IDisposable where TOptions : class
    {
        void Configure(TOptions options);
    }

    public partial interface ILoadContextualOptions<TOptions>
        where TOptions : class
    {
        System.Threading.Tasks.ValueTask<IConfigureContextualOptions<TOptions>> LoadAsync<TContext>(string name, in TContext context, System.Threading.CancellationToken cancellationToken)
            where TContext : IOptionsContext;
    }

    public partial interface IOptionsContextReceiver
    {
        void Receive<T>(string key, T value);
    }

    public static partial class NullConfigureContextualOptions
    {
        public static IConfigureContextualOptions<TOptions> GetInstance<TOptions>()
            where TOptions : class { throw null; }
    }
}