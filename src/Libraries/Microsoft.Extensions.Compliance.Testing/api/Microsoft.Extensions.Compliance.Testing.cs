//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.Compliance.Redaction
{
    public static partial class FakeRedactionBuilderExtensions
    {
        public static IRedactionBuilder SetFakeRedactor(this IRedactionBuilder builder, params Classification.DataClassificationSet[] classifications) { throw null; }

        public static IRedactionBuilder SetFakeRedactor(this IRedactionBuilder builder, Configuration.IConfigurationSection section, params Classification.DataClassificationSet[] classifications) { throw null; }

        public static IRedactionBuilder SetFakeRedactor(this IRedactionBuilder builder, System.Action<Testing.FakeRedactorOptions> configure, params Classification.DataClassificationSet[] classifications) { throw null; }
    }
}

namespace Microsoft.Extensions.Compliance.Testing
{
    public partial class FakeRedactionCollector
    {
        public System.Collections.Generic.IReadOnlyList<RedactedData> AllRedactedData { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<RedactorRequested> AllRedactorRequests { get { throw null; } }

        public RedactedData LastRedactedData { get { throw null; } }

        public RedactorRequested LastRedactorRequested { get { throw null; } }
    }

    public partial class FakeRedactor : Redaction.Redactor
    {
        public FakeRedactor(Options.IOptions<FakeRedactorOptions>? options = null, FakeRedactionCollector? collector = null) { }

        public FakeRedactionCollector EventCollector { get { throw null; } }

        public static FakeRedactor Create(FakeRedactorOptions? options = null, FakeRedactionCollector? collector = null) { throw null; }

        public override int GetRedactedLength(System.ReadOnlySpan<char> input) { throw null; }

        public override int Redact(System.ReadOnlySpan<char> source, System.Span<char> destination) { throw null; }
    }

    public partial class FakeRedactorOptions
    {
        [System.ComponentModel.DataAnnotations.Required]
        [System.Diagnostics.CodeAnalysis.StringSyntax("CompositeFormat")]
        public string RedactionFormat { get { throw null; } set { } }
    }

    public partial class FakeRedactorProvider : Redaction.IRedactorProvider
    {
        public FakeRedactorProvider(FakeRedactorOptions? options = null, FakeRedactionCollector? eventCollector = null) { }

        public FakeRedactionCollector Collector { get { throw null; } }

        public Redaction.Redactor GetRedactor(Classification.DataClassificationSet classifications) { throw null; }
    }

    public static partial class FakeTaxonomy
    {
        public static Classification.DataClassification PrivateData { get { throw null; } }

        public static Classification.DataClassification PublicData { get { throw null; } }

        public static string TaxonomyName { get { throw null; } }
    }

    public sealed partial class PrivateDataAttribute : Classification.DataClassificationAttribute
    {
        public PrivateDataAttribute() : base(default) { }
    }

    public sealed partial class PublicDataAttribute : Classification.DataClassificationAttribute
    {
        public PublicDataAttribute() : base(default) { }
    }

    public readonly partial struct RedactedData : System.IEquatable<RedactedData>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public RedactedData(string original, string redacted, int sequenceNumber) { }

        public string Original { get { throw null; } }

        public string Redacted { get { throw null; } }

        public int SequenceNumber { get { throw null; } }

        public readonly bool Equals(RedactedData other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(RedactedData left, RedactedData right) { throw null; }

        public static bool operator !=(RedactedData left, RedactedData right) { throw null; }
    }

    public readonly partial struct RedactorRequested : System.IEquatable<RedactorRequested>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public RedactorRequested(Classification.DataClassificationSet classifications, int sequenceNumber) { }

        public Classification.DataClassificationSet DataClassifications { get { throw null; } }

        public int SequenceNumber { get { throw null; } }

        public readonly bool Equals(RedactorRequested other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(RedactorRequested left, RedactorRequested right) { throw null; }

        public static bool operator !=(RedactorRequested left, RedactorRequested right) { throw null; }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    public static partial class FakeRedactionServiceCollectionExtensions
    {
        public static IServiceCollection AddFakeRedaction(this IServiceCollection services, System.Action<Compliance.Testing.FakeRedactorOptions> configure) { throw null; }

        public static IServiceCollection AddFakeRedaction(this IServiceCollection services) { throw null; }
    }
}

namespace System
{
    public static partial class FakeRedactionServiceProviderExtensions
    {
        public static Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector GetFakeRedactionCollector(this IServiceProvider serviceProvider) { throw null; }
    }
}