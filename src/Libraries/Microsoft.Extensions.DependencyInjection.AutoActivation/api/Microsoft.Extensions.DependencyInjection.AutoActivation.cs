//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.DependencyInjection
{
    public static partial class AutoActivationExtensions
    {
        public static IServiceCollection ActivateKeyedSingleton(this IServiceCollection services, System.Type serviceType, object? serviceKey) { throw null; }

        public static IServiceCollection ActivateKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey)
            where TService : class { throw null; }

        public static IServiceCollection ActivateSingleton(this IServiceCollection services, System.Type serviceType) { throw null; }

        public static IServiceCollection ActivateSingleton<TService>(this IServiceCollection services)
            where TService : class { throw null; }

        public static IServiceCollection AddActivatedKeyedSingleton(this IServiceCollection services, System.Type serviceType, object? serviceKey, System.Func<System.IServiceProvider, object?, object> implementationFactory) { throw null; }

        public static IServiceCollection AddActivatedKeyedSingleton(this IServiceCollection services, System.Type serviceType, object? serviceKey, System.Type implementationType) { throw null; }

        public static IServiceCollection AddActivatedKeyedSingleton(this IServiceCollection services, System.Type serviceType, object? serviceKey) { throw null; }

        public static IServiceCollection AddActivatedKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey, System.Func<System.IServiceProvider, object?, TService> implementationFactory)
            where TService : class { throw null; }

        public static IServiceCollection AddActivatedKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey)
            where TService : class { throw null; }

        public static IServiceCollection AddActivatedKeyedSingleton<TService, TImplementation>(this IServiceCollection services, object? serviceKey, System.Func<System.IServiceProvider, object?, TImplementation> implementationFactory)
            where TService : class where TImplementation : class, TService { throw null; }

        public static IServiceCollection AddActivatedKeyedSingleton<TService, TImplementation>(this IServiceCollection services, object? serviceKey)
            where TService : class where TImplementation : class, TService { throw null; }

        public static IServiceCollection AddActivatedSingleton(this IServiceCollection services, System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory) { throw null; }

        public static IServiceCollection AddActivatedSingleton(this IServiceCollection services, System.Type serviceType, System.Type implementationType) { throw null; }

        public static IServiceCollection AddActivatedSingleton(this IServiceCollection services, System.Type serviceType) { throw null; }

        public static IServiceCollection AddActivatedSingleton<TService>(this IServiceCollection services, System.Func<System.IServiceProvider, TService> implementationFactory)
            where TService : class { throw null; }

        public static IServiceCollection AddActivatedSingleton<TService>(this IServiceCollection services)
            where TService : class { throw null; }

        public static IServiceCollection AddActivatedSingleton<TService, TImplementation>(this IServiceCollection services, System.Func<System.IServiceProvider, TImplementation> implementationFactory)
            where TService : class where TImplementation : class, TService { throw null; }

        public static IServiceCollection AddActivatedSingleton<TService, TImplementation>(this IServiceCollection services)
            where TService : class where TImplementation : class, TService { throw null; }

        public static void TryAddActivatedKeyedSingleton(this IServiceCollection services, System.Type serviceType, object? serviceKey, System.Func<System.IServiceProvider, object?, object> implementationFactory) { }

        public static void TryAddActivatedKeyedSingleton(this IServiceCollection services, System.Type serviceType, object? serviceKey, System.Type implementationType) { }

        public static void TryAddActivatedKeyedSingleton(this IServiceCollection services, System.Type serviceType, object? serviceKey) { }

        public static void TryAddActivatedKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey, System.Func<System.IServiceProvider, object?, TService> implementationFactory)
            where TService : class { }

        public static void TryAddActivatedKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey)
            where TService : class { }

        public static void TryAddActivatedKeyedSingleton<TService, TImplementation>(this IServiceCollection services, object? serviceKey)
            where TService : class where TImplementation : class, TService { }

        public static void TryAddActivatedSingleton(this IServiceCollection services, System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory) { }

        public static void TryAddActivatedSingleton(this IServiceCollection services, System.Type serviceType, System.Type implementationType) { }

        public static void TryAddActivatedSingleton(this IServiceCollection services, System.Type serviceType) { }

        public static void TryAddActivatedSingleton<TService>(this IServiceCollection services, System.Func<System.IServiceProvider, TService> implementationFactory)
            where TService : class { }

        public static void TryAddActivatedSingleton<TService>(this IServiceCollection services)
            where TService : class { }

        public static void TryAddActivatedSingleton<TService, TImplementation>(this IServiceCollection services)
            where TService : class where TImplementation : class, TService { }
    }
}